
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compila_flex;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSIntactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSIntactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSIntactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSIntactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\007\000\002\013" +
    "\006\000\002\020\017\000\002\017\020\000\002\007\004" +
    "\000\002\007\004\000\002\007\002\000\002\010\004\000" +
    "\002\010\003\000\002\015\010\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\006\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\004\000\002\031\007\000\002\031\007\000" +
    "\002\031\007\000\002\031\007\000\002\032\011\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\011\003\000\002\011\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\004\000\002\012\013\000" +
    "\002\012\014\000\002\033\005\000\002\034\005\000\002" +
    "\034\003\000\002\035\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\003\012\000\002\014\010" +
    "\000\002\014\006\000\002\014\002\000\002\026\011\000" +
    "\002\027\010\000\002\027\010\000\002\027\006\000\002" +
    "\004\003\000\002\004\005\000\002\021\003\000\002\021" +
    "\004\000\002\021\005\000\002\022\003\000\002\022\005" +
    "\000\002\024\003\000\002\024\006\000\002\024\003\000" +
    "\002\024\005\000\002\024\004\000\002\023\003\000\002" +
    "\025\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\037\005\001\002\000\004\002\274\001" +
    "\002\000\004\040\006\001\002\000\004\016\007\001\002" +
    "\000\032\003\025\017\ufffa\025\027\026\021\027\015\032" +
    "\030\036\022\041\031\050\016\053\032\054\023\055\026" +
    "\001\002\000\036\003\025\014\ufffa\017\ufffa\025\027\026" +
    "\021\027\015\032\030\036\022\041\031\047\ufffa\050\016" +
    "\053\032\054\023\055\026\001\002\000\036\003\ufff1\014" +
    "\ufff1\017\ufff1\025\ufff1\026\ufff1\027\ufff1\032\ufff1\036\ufff1" +
    "\041\ufff1\047\ufff1\050\ufff1\053\ufff1\054\ufff1\055\ufff1\001" +
    "\002\000\036\003\uffef\014\uffef\017\uffef\025\uffef\026\uffef" +
    "\027\uffef\032\uffef\036\uffef\041\uffef\047\uffef\050\uffef\053" +
    "\uffef\054\uffef\055\uffef\001\002\000\036\003\ufff0\014\ufff0" +
    "\017\ufff0\025\ufff0\026\ufff0\027\ufff0\032\ufff0\036\ufff0\041" +
    "\ufff0\047\ufff0\050\ufff0\053\ufff0\054\ufff0\055\ufff0\001\002" +
    "\000\036\003\ufff2\014\ufff2\017\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\032\ufff2\036\ufff2\041\ufff2\047\ufff2\050\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\001\002\000\004\011\252\001\002\000" +
    "\004\015\247\001\002\000\004\017\246\001\002\000\036" +
    "\003\ufff5\014\ufff5\017\ufff5\025\ufff5\026\ufff5\027\ufff5\032" +
    "\ufff5\036\ufff5\041\ufff5\047\ufff5\050\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\001\002\000\020\011\213\022\210\024\042\034" +
    "\040\035\041\042\217\050\215\001\002\000\012\004\054" +
    "\005\050\006\052\007\053\001\002\000\004\011\162\001" +
    "\002\000\036\003\ufff4\014\ufff4\017\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\032\ufff4\036\ufff4\041\ufff4\047\ufff4\050\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\001\002\000\026\003\025\025\027" +
    "\026\021\027\015\032\030\041\031\050\016\053\032\054" +
    "\023\055\026\001\002\000\004\011\153\001\002\000\004" +
    "\011\136\001\002\000\004\011\111\001\002\000\014\004" +
    "\054\005\050\006\052\007\053\050\051\001\002\000\004" +
    "\011\036\001\002\000\036\003\ufff6\014\ufff6\017\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\032\ufff6\036\ufff6\041\ufff6\047\ufff6" +
    "\050\ufff6\053\ufff6\054\ufff6\055\ufff6\001\002\000\036\003" +
    "\025\014\ufffa\017\ufffa\025\027\026\021\027\015\032\030" +
    "\036\022\041\031\047\ufffa\050\016\053\032\054\023\055" +
    "\026\001\002\000\010\014\ufffc\017\ufffc\047\ufffc\001\002" +
    "\000\012\024\042\034\040\035\041\050\037\001\002\000" +
    "\004\012\046\001\002\000\024\010\uffd9\012\uffd9\013\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\040\uffd9\001" +
    "\002\000\024\010\uffd7\012\uffd7\013\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\040\uffd7\001\002\000\024\010" +
    "\uffd8\012\uffd8\013\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\040\uffd8\001\002\000\004\012\044\001\002\000" +
    "\004\010\045\001\002\000\036\003\uffec\014\uffec\017\uffec" +
    "\025\uffec\026\uffec\027\uffec\032\uffec\036\uffec\041\uffec\047" +
    "\uffec\050\uffec\053\uffec\054\uffec\055\uffec\001\002\000\004" +
    "\010\047\001\002\000\036\003\uffed\014\uffed\017\uffed\025" +
    "\uffed\026\uffed\027\uffed\032\uffed\036\uffed\041\uffed\047\uffed" +
    "\050\uffed\053\uffed\054\uffed\055\uffed\001\002\000\004\050" +
    "\uffe7\001\002\000\004\015\071\001\002\000\004\050\uffe6" +
    "\001\002\000\004\050\uffe5\001\002\000\004\050\uffe8\001" +
    "\002\000\004\050\056\001\002\000\006\010\062\015\060" +
    "\001\002\000\036\003\uffff\014\uffff\017\uffff\025\uffff\026" +
    "\uffff\027\uffff\032\uffff\036\uffff\041\uffff\047\uffff\050\uffff" +
    "\053\uffff\054\uffff\055\uffff\001\002\000\012\024\042\034" +
    "\040\035\041\050\065\001\002\000\036\003\uffe3\014\uffe3" +
    "\017\uffe3\025\uffe3\026\uffe3\027\uffe3\032\uffe3\036\uffe3\041" +
    "\uffe3\047\uffe3\050\uffe3\053\uffe3\054\uffe3\055\uffe3\001\002" +
    "\000\036\003\uffe4\014\uffe4\017\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\032\uffe4\036\uffe4\041\uffe4\047\uffe4\050\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\001\002\000\004\010\064\001\002\000" +
    "\036\003\uffe0\014\uffe0\017\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\032\uffe0\036\uffe0\041\uffe0\047\uffe0\050\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\001\002\000\004\010\070\001\002\000\004" +
    "\010\067\001\002\000\036\003\uffe2\014\uffe2\017\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\032\uffe2\036\uffe2\041\uffe2\047\uffe2" +
    "\050\uffe2\053\uffe2\054\uffe2\055\uffe2\001\002\000\036\003" +
    "\uffe1\014\uffe1\017\uffe1\025\uffe1\026\uffe1\027\uffe1\032\uffe1" +
    "\036\uffe1\041\uffe1\047\uffe1\050\uffe1\053\uffe1\054\uffe1\055" +
    "\uffe1\001\002\000\004\052\072\001\002\000\004\051\073" +
    "\001\002\000\004\011\074\001\002\000\004\034\075\001" +
    "\002\000\004\012\076\001\002\000\006\010\101\016\077" +
    "\001\002\000\010\024\042\034\040\035\041\001\002\000" +
    "\004\010\102\001\002\000\036\003\uffdf\014\uffdf\017\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\032\uffdf\036\uffdf\041\uffdf\047" +
    "\uffdf\050\uffdf\053\uffdf\054\uffdf\055\uffdf\001\002\000\036" +
    "\003\uffde\014\uffde\017\uffde\025\uffde\026\uffde\027\uffde\032" +
    "\uffde\036\uffde\041\uffde\047\uffde\050\uffde\053\uffde\054\uffde" +
    "\055\uffde\001\002\000\006\017\uffdb\020\107\001\002\000" +
    "\006\017\uffda\020\uffda\001\002\000\004\017\106\001\002" +
    "\000\004\010\uffdd\001\002\000\010\024\042\034\040\035" +
    "\041\001\002\000\004\017\uffdc\001\002\000\004\050\112" +
    "\001\002\000\004\012\113\001\002\000\004\040\114\001" +
    "\002\000\006\045\117\046\115\001\002\000\004\013\133" +
    "\001\002\000\004\033\132\001\002\000\012\024\042\034" +
    "\040\035\041\050\120\001\002\000\004\013\126\001\002" +
    "\000\004\013\122\001\002\000\032\003\025\014\ufffa\025" +
    "\027\026\021\027\015\032\030\036\022\041\031\050\016" +
    "\053\032\054\023\055\026\001\002\000\004\014\124\001" +
    "\002\000\006\045\117\046\115\001\002\000\004\033\uffd0" +
    "\001\002\000\032\003\025\014\ufffa\025\027\026\021\027" +
    "\015\032\030\036\022\041\031\050\016\053\032\054\023" +
    "\055\026\001\002\000\004\014\130\001\002\000\006\045" +
    "\117\046\115\001\002\000\004\033\uffd1\001\002\000\036" +
    "\003\uffd2\014\uffd2\017\uffd2\025\uffd2\026\uffd2\027\uffd2\032" +
    "\uffd2\036\uffd2\041\uffd2\047\uffd2\050\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\001\002\000\032\003\025\014\ufffa\025\027\026" +
    "\021\027\015\032\030\036\022\041\031\050\016\053\032" +
    "\054\023\055\026\001\002\000\004\014\135\001\002\000" +
    "\004\033\uffcf\001\002\000\004\050\137\001\002\000\004" +
    "\043\140\001\002\000\004\034\141\001\002\000\004\044" +
    "\142\001\002\000\004\044\143\001\002\000\004\044\144" +
    "\001\002\000\004\034\145\001\002\000\004\012\146\001" +
    "\002\000\004\040\147\001\002\000\004\013\150\001\002" +
    "\000\032\003\025\014\ufffa\025\027\026\021\027\015\032" +
    "\030\036\022\041\031\050\016\053\032\054\023\055\026" +
    "\001\002\000\004\014\152\001\002\000\036\003\ufffd\014" +
    "\ufffd\017\ufffd\025\ufffd\026\ufffd\027\ufffd\032\ufffd\036\ufffd" +
    "\041\ufffd\047\ufffd\050\ufffd\053\ufffd\054\ufffd\055\ufffd\001" +
    "\002\000\004\050\154\001\002\000\004\020\155\001\002" +
    "\000\004\050\156\001\002\000\004\012\157\001\002\000" +
    "\004\010\160\001\002\000\036\003\uffe9\014\uffe9\017\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\032\uffe9\036\uffe9\041\uffe9\047" +
    "\uffe9\050\uffe9\053\uffe9\054\uffe9\055\uffe9\001\002\000\036" +
    "\003\uffee\014\uffee\017\uffee\025\uffee\026\uffee\027\uffee\032" +
    "\uffee\036\uffee\041\uffee\047\uffee\050\uffee\053\uffee\054\uffee" +
    "\055\uffee\001\002\000\012\024\042\034\040\035\041\050" +
    "\163\001\002\000\004\012\167\001\002\000\004\012\165" +
    "\001\002\000\004\010\166\001\002\000\036\003\uffea\014" +
    "\uffea\017\uffea\025\uffea\026\uffea\027\uffea\032\uffea\036\uffea" +
    "\041\uffea\047\uffea\050\uffea\053\uffea\054\uffea\055\uffea\001" +
    "\002\000\004\010\170\001\002\000\036\003\uffeb\014\uffeb" +
    "\017\uffeb\025\uffeb\026\uffeb\027\uffeb\032\uffeb\036\uffeb\041" +
    "\uffeb\047\uffeb\050\uffeb\053\uffeb\054\uffeb\055\uffeb\001\002" +
    "\000\004\050\172\001\002\000\004\011\173\001\002\000" +
    "\014\004\054\005\050\006\052\007\053\050\174\001\002" +
    "\000\004\012\ufff8\001\002\000\004\050\207\001\002\000" +
    "\004\012\177\001\002\000\004\016\200\001\002\000\032" +
    "\003\025\025\027\026\021\027\015\032\030\036\022\041" +
    "\031\047\ufffa\050\016\053\032\054\023\055\026\001\002" +
    "\000\004\047\202\001\002\000\004\011\203\001\002\000" +
    "\014\004\054\005\050\006\052\007\053\050\174\001\002" +
    "\000\004\012\205\001\002\000\004\017\206\001\002\000" +
    "\036\003\ufffe\014\ufffe\017\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\032\ufffe\036\ufffe\041\ufffe\047\ufffe\050\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\001\002\000\004\012\ufff9\001\002\000\016" +
    "\011\uffc2\024\uffc2\034\uffc2\035\uffc2\042\uffc2\050\uffc2\001" +
    "\002\000\022\010\uffc5\012\uffc5\013\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\040\uffc5\001\002\000\022\010\uffcc\012" +
    "\uffcc\013\uffcc\020\uffcc\021\uffcc\022\uffcc\023\225\040\uffcc" +
    "\001\002\000\020\011\213\022\210\024\042\034\040\035" +
    "\041\042\217\050\215\001\002\000\004\040\240\001\002" +
    "\000\024\010\uffc7\011\232\012\uffc7\013\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\040\uffc7\001\002\000\022\010\uffc9" +
    "\012\uffc9\013\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\040" +
    "\uffc9\001\002\000\016\011\213\024\042\034\040\035\041" +
    "\042\217\050\215\001\002\000\016\011\213\024\042\034" +
    "\040\035\041\042\217\050\215\001\002\000\020\010\uffce" +
    "\012\uffce\013\uffce\020\uffce\021\222\022\223\040\uffce\001" +
    "\002\000\020\011\213\022\210\024\042\034\040\035\041" +
    "\042\217\050\215\001\002\000\016\011\213\024\042\034" +
    "\040\035\041\042\217\050\215\001\002\000\022\010\uffca" +
    "\012\uffca\013\uffca\020\uffca\021\uffca\022\uffca\023\225\040" +
    "\uffca\001\002\000\016\011\213\024\042\034\040\035\041" +
    "\042\217\050\215\001\002\000\022\010\uffc8\012\uffc8\013" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\040\uffc8\001\002" +
    "\000\014\010\uffcd\012\uffcd\013\uffcd\020\uffcd\040\uffcd\001" +
    "\002\000\022\010\uffcb\012\uffcb\013\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\225\040\uffcb\001\002\000\022\010\uffc3\012" +
    "\uffc3\013\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\040\uffc3" +
    "\001\002\000\020\011\213\022\210\024\042\034\040\035" +
    "\041\042\217\050\215\001\002\000\006\012\uffc1\020\uffc1" +
    "\001\002\000\006\012\236\020\235\001\002\000\020\011" +
    "\213\022\210\024\042\034\040\035\041\042\217\050\215" +
    "\001\002\000\022\010\uffc6\012\uffc6\013\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\040\uffc6\001\002\000\006\012\uffc0" +
    "\020\uffc0\001\002\000\004\013\241\001\002\000\026\003" +
    "\025\025\027\026\021\027\015\032\030\041\031\050\016" +
    "\053\032\054\023\055\026\001\002\000\004\014\243\001" +
    "\002\000\036\003\ufff7\014\ufff7\017\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\032\ufff7\036\ufff7\041\ufff7\047\ufff7\050\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\001\002\000\004\012\245\001\002" +
    "\000\022\010\uffc4\012\uffc4\013\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\040\uffc4\001\002\000\004\002\000\001\002" +
    "\000\020\011\213\022\210\024\042\034\040\035\041\042" +
    "\217\050\215\001\002\000\004\010\251\001\002\000\036" +
    "\003\ufff3\014\ufff3\017\ufff3\025\ufff3\026\ufff3\027\ufff3\032" +
    "\ufff3\036\ufff3\041\ufff3\047\ufff3\050\ufff3\053\ufff3\054\ufff3" +
    "\055\ufff3\001\002\000\020\011\213\022\210\024\042\034" +
    "\040\035\041\042\217\050\215\001\002\000\004\012\254" +
    "\001\002\000\004\013\255\001\002\000\026\003\025\025" +
    "\027\026\021\027\015\032\030\041\031\050\016\053\032" +
    "\054\023\055\026\001\002\000\004\014\257\001\002\000" +
    "\042\003\uffd3\014\uffd3\017\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\262\031\261\032\uffd3\036\uffd3\041\uffd3\047\uffd3\050" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\001\002\000\036\003\uffd6" +
    "\014\uffd6\017\uffd6\025\uffd6\026\uffd6\027\uffd6\032\uffd6\036" +
    "\uffd6\041\uffd6\047\uffd6\050\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\001\002\000\004\013\270\001\002\000\020\011\213\022" +
    "\210\024\042\034\040\035\041\042\217\050\215\001\002" +
    "\000\004\013\264\001\002\000\026\003\025\025\027\026" +
    "\021\027\015\032\030\041\031\050\016\053\032\054\023" +
    "\055\026\001\002\000\004\014\266\001\002\000\042\003" +
    "\uffd3\014\uffd3\017\uffd3\025\uffd3\026\uffd3\027\uffd3\030\262" +
    "\031\261\032\uffd3\036\uffd3\041\uffd3\047\uffd3\050\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\001\002\000\036\003\uffd5\014\uffd5" +
    "\017\uffd5\025\uffd5\026\uffd5\027\uffd5\032\uffd5\036\uffd5\041" +
    "\uffd5\047\uffd5\050\uffd5\053\uffd5\054\uffd5\055\uffd5\001\002" +
    "\000\026\003\025\025\027\026\021\027\015\032\030\041" +
    "\031\050\016\053\032\054\023\055\026\001\002\000\004" +
    "\014\272\001\002\000\036\003\uffd4\014\uffd4\017\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\032\uffd4\036\uffd4\041\uffd4\047\uffd4" +
    "\050\uffd4\053\uffd4\054\uffd4\055\uffd4\001\002\000\010\014" +
    "\ufffb\017\ufffb\047\ufffb\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\023\007\016" +
    "\012\011\013\032\015\033\017\017\020\007\026\013\031" +
    "\010\032\012\001\001\000\026\003\023\007\272\012\011" +
    "\013\032\015\033\017\017\020\007\026\013\031\010\032" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\213" +
    "\005\210\021\220\022\211\023\217\024\215\001\001\000" +
    "\004\006\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\023\012\011\013\032\015\160\017\017\026" +
    "\013\031\010\032\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\023\007\034" +
    "\012\011\013\032\015\033\017\017\020\007\026\013\031" +
    "\010\032\012\001\001\000\002\001\001\000\004\005\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\056\016\060\030\062\001\001\000\002\001\001\000\004" +
    "\005\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\077\001\001\000\010\005" +
    "\103\034\104\035\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\103" +
    "\034\107\035\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\023\007\122\012\011\013\032\015\033\017\017\020" +
    "\007\026\013\031\010\032\012\001\001\000\002\001\001" +
    "\000\004\027\124\001\001\000\002\001\001\000\026\003" +
    "\023\007\126\012\011\013\032\015\033\017\017\020\007" +
    "\026\013\031\010\032\012\001\001\000\002\001\001\000" +
    "\004\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\023\007\133\012\011\013\032\015\033\017" +
    "\017\020\007\026\013\031\010\032\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\023\007\150" +
    "\012\011\013\032\015\033\017\017\020\007\026\013\031" +
    "\010\032\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\174\010\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\023\007\200\012\011\013\032\015\033\017\017" +
    "\020\007\026\013\031\010\032\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\174\010\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\243\005\210\021\220\022\211\023" +
    "\217\024\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\210\024\230\001\001\000" +
    "\010\005\210\022\227\024\215\001\001\000\002\001\001" +
    "\000\016\004\226\005\210\021\220\022\211\023\217\024" +
    "\215\001\001\000\010\005\210\022\223\024\215\001\001" +
    "\000\002\001\001\000\006\005\210\024\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\232\005\210\021\220\022\211\023" +
    "\217\024\215\025\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\236\005\210\021\220\022\211\023" +
    "\217\024\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\023\012\011\013\032\015" +
    "\241\017\017\026\013\031\010\032\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\247\005\210\021\220" +
    "\022\211\023\217\024\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\252\005\210\021\220\022\211" +
    "\023\217\024\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\023\012\011\013\032\015\255\017\017" +
    "\026\013\031\010\032\012\001\001\000\002\001\001\000" +
    "\004\014\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\262\005\210\021\220\022\211\023\217\024" +
    "\215\001\001\000\002\001\001\000\022\003\023\012\011" +
    "\013\032\015\264\017\017\026\013\031\010\032\012\001" +
    "\001\000\002\001\001\000\004\014\266\001\001\000\002" +
    "\001\001\000\022\003\023\012\011\013\032\015\270\017" +
    "\017\026\013\031\010\032\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSIntactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSIntactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSIntactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo arbol;
    public static int token=0;
    public static int parNum=0;
    
         /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
       System.out.println("Error Sintáctico en la Columna " + (s.left) +
        " linear "+s.right+ ". No se esperaba este componente: " +s.value+".");
       System.out.println("Sintaxis malo malo malo");
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la columna " + 
        (s.left)+ " linear "+s.right+". Componente " + s.value + 
        " no reconocido.");
        System.out.println("Sintaxis MAL irrecuperable"); 
    }  
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSIntactico$actions {
  private final AnalizadorSIntactico parser;

  /** Constructor */
  CUP$AnalizadorSIntactico$actions(AnalizadorSIntactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSIntactico$do_action_part00000000(
    int                        CUP$AnalizadorSIntactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSIntactico$parser,
    java.util.Stack            CUP$AnalizadorSIntactico$stack,
    int                        CUP$AnalizadorSIntactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSIntactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSIntactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSIntactico$parser.done_parsing();
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= START FLECHA BRACKETA body BRACKETC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    Nodo start = new Nodo("Start",token);
    parser.token ++;
    
    Nodo flecha = new Nodo("Flecha",token);
    start.addHijo(flecha);
    parser.token ++;

    Nodo Braca = new Nodo("Braca",token);
    start.addHijo(Braca);
    parser.token ++;
    
    start.addHijo((Nodo)b);

    Nodo Bracc = new Nodo("Bracc",token);
    start.addHijo(Bracc);
    parser.token ++;
    
    

    parser.arbol = start;
    RESULT = start;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declara_simple ::= VAR type ID declara_puntoc 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
        Nodo decl = new Nodo("Declaracion Simple",  parser.token);
        parser.token++;

        Nodo variable=new Nodo("Variable",parser.token);
        parser.token++;

        variable.addHijo(v.toString(),parser.token);
        decl.addHijo(variable);
        parser.token++;

        decl.addHijo((Nodo)t);

        Nodo id=new Nodo("ID",parser.token);
        parser.token++;

        id.addHijo(ide.toString(),parser.token);
        decl.addHijo(id);
        parser.token++;

        decl.addHijo((Nodo)dc);

        RESULT = decl;
    

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_simple",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= FUNC type ID PARENTESISA parametro PARENTESISC BRACKETA body REPLY PARENTESISA parametro PARENTESISC BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-11)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-11)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-10)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-10)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-10)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-8)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		
    Nodo node= new Nodo("Funciones",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("Funcion",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo((Nodo)t);

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);

    node.addHijo((Nodo)p);
    
    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);

    Nodo bracketa=new Nodo("[",parser.token);
    parser.token++;
    node.addHijo(bracketa);

    node.addHijo((Nodo)b);

    Nodo reply=new Nodo("Reply",parser.token);
    parser.token++;
    node.addHijo(reply);

    node.addHijo((Nodo)p2);

    RESULT= node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-12)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CicloFor ::= FOR PARENTESISA ID IN NUM PUNTO PUNTO PUNTO NUM PARENTESISC FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-11)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-11)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-9)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
        Nodo ciclo = new Nodo("CicloFor",parser.token);
        parser.token++;

        Nodo fore= new Nodo("For",parser.token);
        parser.token++;
        ciclo.addHijo(fore);
        
    /*
        Nodo parentesisa=new Nodo("(",parser.token);
        parser.token++;
        ciclo.addHijo(parentesisa);
        
*/
        Nodo ID=new Nodo("Id",parser.token);
        parser.token++;
        ID.addHijo(ide.toString(),parser.token);
        
        ciclo.addHijo(ID);
        parser.token++;

        Nodo in=new Nodo("in",parser.token);
        parser.token++;
        ciclo.addHijo(in);

        Nodo num1=new Nodo("num",parser.token);
        parser.token++;
        num1.addHijo(n.toString(),parser.token);
        parser.token++;
        ciclo.addHijo(num1);

        Nodo punto=new Nodo("...",parser.token);
        parser.token++;
        ciclo.addHijo(punto);
        
        Nodo num2=new Nodo("num",parser.token);
        parser.token++;
        num2.addHijo(n1.toString(),parser.token);
        parser.token++;
        ciclo.addHijo(num2);
/*
        Nodo parentesisc=new Nodo(")",parser.token);
        parser.token++;
        ciclo.addHijo(parentesisc);

        Nodo flecha=new Nodo("->",parser.token);
        parser.token++;
        ciclo.addHijo(flecha);

        Nodo abrirc=new Nodo("<",parser.token);
        parser.token++;
        ciclo.addHijo(abrirc);
*/
        ciclo.addHijo((Nodo)b);
/*
        Nodo cerrarc=new Nodo(">",parser.token);
        parser.token++;
        ciclo.addHijo(cerrarc);
*/
        RESULT= ciclo;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("CicloFor",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= proposition body 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
        Nodo bodyn = new Nodo("body",  parser.token);
        parser.token++;
        bodyn.addHijo((Nodo) p);
        System.out.println("entro a  body");
        if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }

        RESULT = bodyn;
                

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= funciones body 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo funciones=new Nodo("Funciones",parser.token);
    parser.token++;

    funciones.addHijo((Nodo)f);

    if(b!=null){
        funciones.addHijitos(((Nodo)b).getHijos());
    }

    RESULT= funciones;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametro ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametro",parser.token);
    parser.token++;

    node.addHijo((Nodo)t);

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametro ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametro",parser.token);
    parser.token++;

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proposition ::= WLE expression FLECHA ABRIRC proposition CERRARC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo whil=new Nodo("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)p);

    RESULT= node;


              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proposition ::= declara_simple 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;
    node.addHijo((Nodo)d);
    
    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proposition ::= CicloFor 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node = new Nodo("CicloFor",parser.token);
    parser.token++;
    node.addHijo((Nodo)cf);

    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proposition ::= ifState 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    /*
    Nodo node = new Nodo("IF",parser.token);
    parser.token++;
    node.addHijo((Nodo)ife);
    */
    RESULT = ife;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proposition ::= ID ASSIGNMENT expression PUNTOC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		

    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;

    Nodo assing =new Nodo("=",parser.token);
    parser.token++;
    node.addHijo(assing);
    node.addHijo((Nodo)e);

    Nodo puntoc= new Nodo(";",parser.token);
    parser.token++;
    node.addHijo(puntoc);

    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // proposition ::= block_switch 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    RESULT=b;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // proposition ::= print 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    RESULT=p;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proposition ::= catch 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    RESULT=c;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proposition ::= declara_array 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    RESULT = da;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proposition ::= error proposition 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    node.addHijo("Error",parser.token);

    node.addHijo((Nodo)p);

    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // print ::= THROW PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo thro=new Nodo("Throw",parser.token);
    parser.token++;
    node.addHijo(thro);

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);

    Nodo puntoc=new Nodo(";",parser.token);
    parser.token++;
    node.addHijo(puntoc);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("print",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // print ::= THROW PARENTESISA valores PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo thro=new Nodo("Throw",parser.token);
    parser.token++;
    node.addHijo(thro);

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);

    node.addHijo((Nodo)v);

    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);

    Nodo puntoc=new Nodo(";",parser.token);
    parser.token++;
    node.addHijo(puntoc);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("print",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // print ::= THROWDOWN PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		
       Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo thro=new Nodo("ThrowDOWN",parser.token);
    parser.token++;
    node.addHijo(thro);

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);

    Nodo puntoc=new Nodo(";",parser.token);
    parser.token++;
    node.addHijo(puntoc);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("print",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // print ::= THROWDOWN PARENTESISA valores PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo thro=new Nodo("ThrowDown",parser.token);
    parser.token++;
    node.addHijo(thro);

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);

    node.addHijo((Nodo)v);

    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);

    Nodo puntoc=new Nodo(";",parser.token);
    parser.token++;
    node.addHijo(puntoc);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("print",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // catch ::= CATCH PARENTESISA ID COMMA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		
    Nodo node=new Nodo("Empieza el catch",parser.token);
    parser.token++;

    Nodo catche=new Nodo("Catch",parser.token);
    parser.token++;
    node.addHijo(catche);

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa); 

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo comma=new Nodo(",",parser.token);
    parser.token++;
    node.addHijo(comma); 

    Nodo id_2=new Nodo("ID",parser.token);
    parser.token++;

    id_2.addHijo(ide2.toString(),parser.token);
    node.addHijo(id_2); 
    parser.token++;

    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);

    Nodo puntoc=new Nodo(";",parser.token);
    parser.token++;
    node.addHijo(puntoc);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("catch",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= VERDAD 
            {
              Object RESULT =null;
		
    
    Nodo node = new Nodo("Verdad",  parser.token);
    parser.token++;
    RESULT = node;
    

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= NUMERITO 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("Numero",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= LETRA 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("Char",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= WORD 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("String",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declara_puntoc ::= PUNTOC 
            {
              Object RESULT =null;
		
    Nodo node =new Nodo("Declaracion Puntoc",parser.token);
    node.addHijo(";",parser.token);
    parser.token++;

    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_puntoc",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declara_puntoc ::= asigna 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    /*Nodo node =new Nodo("Asignacion",parser.token);
    node.addHijo((Nodo)as);
    parser.token++;*/

    RESULT = as;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_puntoc",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asigna ::= ASSIGNMENT valores PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    Nodo node=new Nodo("asignacion",parser.token);
    parser.token++;

    Nodo assignment=new Nodo("=",parser.token);
    node.addHijo(assignment);
    parser.token++;

    node.addHijo((Nodo)v);

    Nodo puntoc=new Nodo(";",parser.token);
    node.addHijo(puntoc);
    parser.token++;

    RESULT= node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("asigna",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asigna ::= ASSIGNMENT ID PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    Nodo node=new Nodo("asignacion",parser.token);
    parser.token++;

    Nodo assignment=new Nodo("=",parser.token);
    node.addHijo(assignment);
    parser.token++;  

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo puntoc=new Nodo(";",parser.token);
    node.addHijo(puntoc);
    parser.token++;

    RESULT= node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("asigna",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asigna ::= vacio PUNTOC 
            {
              Object RESULT =null;
		
    Nodo node=new Nodo("asignacion",parser.token);
    parser.token++;

    Nodo puntoc=new Nodo(";",parser.token);
    node.addHijo(puntoc);
    parser.token++;

    RESULT= node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("asigna",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA NUM PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-7)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-7)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		

    Nodo node = new Nodo("Declara Array",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);

    Nodo num2=new Nodo("num",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);

    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);



    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_array",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA NUM PARENTESISC bracket_valores PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-8)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-8)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).value;
		int bvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object bv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    Nodo node = new Nodo("Declara Array",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);

    Nodo num2=new Nodo("num",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);

    

    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);

    node.addHijo((Nodo)bv);

    RESULT= node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("declara_array",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bracket_valores ::= BRACKETA list_valores BRACKETC 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    RESULT=lv;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("bracket_valores",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // list_valores ::= arrayData COMMA list_valores 
            {
              Object RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);

    if(lv!=null){
        node.addHijitos(((Nodo)lv).getHijos());
    }
    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("list_valores",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // list_valores ::= arrayData 
            {
              Object RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);
    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("list_valores",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arrayData ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    RESULT=v;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("arrayData",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valores ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo(n.toString(),parser.token);
    parser.token++;

    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valores ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo(b.toString(),parser.token);
    parser.token++;

    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valores ::= LETTER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo(l.toString(),parser.token);
    parser.token++;

    RESULT = node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifState ::= IF PARENTESISA expression PARENTESISC ABRIRC proposition CERRARC eif 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Empiezo IF",parser.token);
    parser.token++;

    Nodo ife=new Nodo("IF",parser.token);
    parser.token++;
    node.addHijo(ife);

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);

    node.addHijo((Nodo)e);

    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);

    Nodo abrirc=new Nodo("<",parser.token);
    parser.token++;
    node.addHijo(abrirc);

    node.addHijo((Nodo)p);

    Nodo cerrarc=new Nodo(">",parser.token);
    parser.token++;
    node.addHijo(cerrarc);

    node.addHijo((Nodo)ei);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("ifState",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // eif ::= EIF expression ABRIRC proposition CERRARC eif 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int eifeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int eiferight = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object eife = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Else if",parser.token);
    parser.token++;

    Nodo ei=new Nodo("eif",parser.token);
    parser.token++;
    node.addHijo(ei);

    node.addHijo((Nodo)e);

    Nodo abrirc=new Nodo("<",parser.token);
    parser.token++;
    node.addHijo(abrirc);

    node.addHijo((Nodo)p);

    Nodo cerrarc=new Nodo(">",parser.token);
    parser.token++;
    node.addHijo(cerrarc);

    if(eife!=null){
        node.addHijitos(((Nodo)eife).getHijos());
    }

    RESULT= node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("eif",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // eif ::= ELSE ABRIRC proposition CERRARC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    Nodo node=new Nodo("Else if",parser.token);
    parser.token++;

    Nodo ei=new Nodo("else",parser.token);
    parser.token++;
    node.addHijo(ei);

    Nodo abrirc=new Nodo("<",parser.token);
    parser.token++;
    node.addHijo(abrirc);

    node.addHijo((Nodo)p);

    Nodo cerrarc=new Nodo(">",parser.token);
    parser.token++;
    node.addHijo(cerrarc);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("eif",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // eif ::= 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("eif",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // block_switch ::= BLOCK PARENTESISA ID PARENTESISC FLECHA cases END 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
   
    Nodo node=new Nodo("Bloque Switch",parser.token);
    parser.token++;

    Nodo block=new Nodo("Block",parser.token);
    parser.token++;
    node.addHijo(block);

    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);

    Nodo id=new Nodo("Id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);

    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);

    Nodo flecha=new Nodo("->",parser.token);
    parser.token++;
    node.addHijo(flecha);

    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }

    Nodo end=new Nodo("end",parser.token);
    parser.token++;
    node.addHijo(end);

    RESULT = node;
    

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("block_switch",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cases ::= CASE ID ABRIRC body CERRARC cases 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    node.addHijo(cas);

    Nodo id=new Nodo("Id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);

    Nodo abrirc=new Nodo("<",parser.token);
    parser.token++;
    node.addHijo(abrirc);

    node.addHijo((Nodo)b);

    Nodo cerrac=new Nodo(">",parser.token);
    parser.token++;
    node.addHijo(cerrac);

    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }
    
    RESULT = node;
    


              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cases ::= CASE valores ABRIRC body CERRARC cases 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    node.addHijo(cas);

    node.addHijo((Nodo)v);

    Nodo abrirc=new Nodo("<",parser.token);
    parser.token++;
    node.addHijo(abrirc);

    node.addHijo((Nodo)b);

    Nodo cerrac=new Nodo(">",parser.token);
    parser.token++;
    node.addHijo(cerrac);

    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }

    RESULT= node;
    

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cases ::= DEFAULT ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;

    Nodo defaulte=new Nodo("Default",parser.token);
    parser.token++;
    node.addHijo(defaulte);

    Nodo abrirc=new Nodo("<",parser.token);
    parser.token++;
    node.addHijo(abrirc);

    node.addHijo((Nodo)b);

    Nodo cerrac=new Nodo(">",parser.token);
    parser.token++;
    node.addHijo(cerrac);

    RESULT=node;
    

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression_simple 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    /*Nodo node =new Nodo("expression simple",parser.token);
    parser.token++;
    node.addHijo((Nodo)es);
    */
    RESULT=es;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression_simple OPER expression 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node =new Nodo("expression simple",parser.token);
    parser.token++;
    node.addHijo((Nodo)es);

    Nodo oper=new Nodo("Operador Relacional",parser.token);
    parser.token++;
    node.addHijo(oper);

    if(ex!=null){
        node.addHijitos(((Nodo)ex).getHijos());
    }
    
    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_simple ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    /*
    Nodo node=new Nodo("Expresion simpel",parser.token);
    parser.token++;

    node.addHijo((Nodo)t);
    */
    RESULT=t;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression_simple",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_simple ::= signo termino 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Expresion simple",parser.token);
    parser.token++;

    node.addHijo((Nodo)s);
    node.addHijo((Nodo)t);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression_simple",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_simple ::= expression_simple OPEA_SUM termino 
            {
              Object RESULT =null;
		int exsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int exsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object exs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Expresion simple",parser.token);
    parser.token++;

    if(exs!=null){
        node.addHijitos(((Nodo)exs).getHijos());
    }

    Nodo opea_sum=new Nodo("Operacion de Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;
    node.addHijo(opea_sum);

    node.addHijo((Nodo)t);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("expression_simple",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    RESULT=f;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // termino ::= termino OPEA_MULT factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node =new Nodo("Termino",parser.token);
    parser.token++;

    if(t!=null){
        node.addHijitos(((Nodo)t).getHijos());
    }
    Nodo opea_mult=new Nodo("Operador de Multiplicacion/Division",parser.token);
    parser.token++;

    opea_mult.addHijo(op.toString(),parser.token++);
    parser.token++;

    node.addHijo(opea_mult);

    node.addHijo((Nodo)f);

    RESULT=node;


              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= ID PARENTESISA list_expression PARENTESISC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
    /*
    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);
    */

    node.addHijo((Nodo)list);
    /*
    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);
    */
    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    /*Nodo node=new Nodo("factor",parser.token);
    parser.token++;
    node.addHijo((Nodo)v);*/
    RESULT=v;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= PARENTESISA expression PARENTESISC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;
    /*
    Nodo parentesisa=new Nodo("(",parser.token);
    parser.token++;
    node.addHijo(parentesisa);
    */
    node.addHijo((Nodo)e);
    /*
    Nodo parentesisc=new Nodo(")",parser.token);
    parser.token++;
    node.addHijo(parentesisc);
    */
    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo not=new Nodo("Not",parser.token);
    parser.token++;
    not.addHijo(n.toString(),parser.token);

    if(f!=null){
        node.addHijitos(((Nodo)f).getHijos());
    }

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // signo ::= OPEA_SUM 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node= new Nodo("Signo",parser.token);
    parser.token++;

    Nodo opea_sum=new Nodo("Operacion Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;

    node.addHijo(opea_sum);

    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("signo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list_expression ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Expresiones",parser.token);
    parser.token++;
    node.addHijo((Nodo)e);

    RESULT=e;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("list_expression",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list_expression ::= list_expression COMMA expression 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSIntactico$stack.peek()).value;
		
    Nodo node=new Nodo("Expresiones",parser.token);
    parser.token++;

    if(list!=null){
        node.addHijitos(((Nodo)list).getHijos());
    }
    Nodo coma=new Nodo(",",parser.token);
    parser.token++;
    node.addHijo(coma);

    node.addHijo((Nodo)e);
    
    RESULT=node;

              CUP$AnalizadorSIntactico$result = parser.getSymbolFactory().newSymbol("list_expression",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.elementAt(CUP$AnalizadorSIntactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSIntactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSIntactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSIntactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSIntactico$do_action(
    int                        CUP$AnalizadorSIntactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSIntactico$parser,
    java.util.Stack            CUP$AnalizadorSIntactico$stack,
    int                        CUP$AnalizadorSIntactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSIntactico$do_action_part00000000(
                               CUP$AnalizadorSIntactico$act_num,
                               CUP$AnalizadorSIntactico$parser,
                               CUP$AnalizadorSIntactico$stack,
                               CUP$AnalizadorSIntactico$top);
    }
}

}
