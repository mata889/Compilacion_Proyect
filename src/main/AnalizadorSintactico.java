
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\007\000\002\017" +
    "\006\000\002\020\010\000\002\020\010\000\002\020\010" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\026\013\000\002\026\012\000\002\026\013\000\002" +
    "\026\012\000\002\026\004\000\002\025\020\000\002\011" +
    "\004\000\002\011\004\000\002\011\002\000\002\036\004" +
    "\000\002\036\004\000\002\036\002\000\002\037\010\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\004\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\006\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\012\005\000\002\012\003\000\002" +
    "\012\003\000\002\013\004\000\002\014\005\000\002\014" +
    "\003\000\002\014\003\000\002\015\003\000\002\023\010" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\004\000\002\047\006\000\002\047\005" +
    "\000\002\047\003\000\002\042\007\000\002\042\007\000" +
    "\002\042\007\000\002\042\007\000\002\043\007\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\016\013\000\002\016\014\000\002\044\005" +
    "\000\002\045\005\000\002\045\003\000\002\045\005\000" +
    "\002\046\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\003\011\000\002\003" +
    "\012\000\002\003\012\000\002\004\006\000\002\005\004" +
    "\000\002\034\011\000\002\035\010\000\002\035\010\000" +
    "\002\035\006\000\002\035\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\003\000\002\027\003\000\002\027" +
    "\004\000\002\027\005\000\002\030\003\000\002\030\005" +
    "\000\002\032\003\000\002\032\006\000\002\032\003\000" +
    "\002\032\005\000\002\032\004\000\002\031\003\000\002" +
    "\033\003\000\002\033\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\041\005\001\002\000\004\002\370\001" +
    "\002\000\004\042\006\001\002\000\004\017\007\001\002" +
    "\000\032\003\026\020\ufff0\027\031\030\022\031\016\034" +
    "\035\040\023\043\033\052\017\055\034\056\024\057\027" +
    "\001\002\000\034\003\026\015\ufff0\020\ufff0\027\031\030" +
    "\022\031\016\034\035\040\023\043\033\052\017\055\034" +
    "\056\024\057\027\001\002\000\034\003\uffd2\015\uffd2\020" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\034\uffd2\040\uffd2\043\uffd2" +
    "\052\uffd2\055\uffd2\056\uffd2\057\uffd2\001\002\000\034\003" +
    "\uffcd\015\uffcd\020\uffcd\027\uffcd\030\uffcd\031\uffcd\034\uffcd" +
    "\040\uffcd\043\uffcd\052\uffcd\055\uffcd\056\uffcd\057\uffcd\001" +
    "\002\000\034\003\uffcb\015\uffcb\020\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\034\uffcb\040\uffcb\043\uffcb\052\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\001\002\000\034\003\uffcc\015\uffcc\020\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\034\uffcc\040\uffcc\043\uffcc\052" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\001\002\000\034\003\uffce" +
    "\015\uffce\020\uffce\027\uffce\030\uffce\031\uffce\034\uffce\040" +
    "\uffce\043\uffce\052\uffce\055\uffce\056\uffce\057\uffce\001\002" +
    "\000\004\012\352\001\002\000\006\012\121\016\343\001" +
    "\002\000\004\020\342\001\002\000\034\003\uffd1\015\uffd1" +
    "\020\uffd1\027\uffd1\030\uffd1\031\uffd1\034\uffd1\040\uffd1\043" +
    "\uffd1\052\uffd1\055\uffd1\056\uffd1\057\uffd1\001\002\000\024" +
    "\003\271\010\056\012\266\024\263\026\054\036\052\037" +
    "\053\044\273\052\270\001\002\000\014\004\106\005\102" +
    "\006\104\007\105\022\212\001\002\000\004\012\202\001" +
    "\002\000\034\003\uffcf\015\uffcf\020\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\034\uffcf\040\uffcf\043\uffcf\052\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\001\002\000\032\003\026\011\uffc7\027\031" +
    "\030\022\031\016\034\035\040\023\043\033\052\017\055" +
    "\034\056\024\057\027\001\002\000\004\012\174\001\002" +
    "\000\004\011\173\001\002\000\004\012\156\001\002\000" +
    "\034\003\uffd4\015\uffd4\020\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\034\uffd4\040\uffd4\043\uffd4\052\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\001\002\000\014\004\106\005\102\006\104\007\105" +
    "\052\103\001\002\000\004\012\073\001\002\000\004\012" +
    "\041\001\002\000\034\003\uffd3\015\uffd3\020\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\034\uffd3\040\uffd3\043\uffd3\052\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\001\002\000\034\003\026\015\ufff0" +
    "\020\ufff0\027\031\030\022\031\016\034\035\040\023\043" +
    "\033\052\017\055\034\056\024\057\027\001\002\000\006" +
    "\015\ufff2\020\ufff2\001\002\000\004\052\042\001\002\000" +
    "\004\013\043\001\002\000\004\042\044\001\002\000\010" +
    "\003\046\047\050\050\045\001\002\000\004\014\070\001" +
    "\002\000\004\035\uffa9\001\002\000\004\035\067\001\002" +
    "\000\014\010\056\026\054\036\052\037\053\052\051\001" +
    "\002\000\004\014\063\001\002\000\024\011\uffb6\013\uffb6" +
    "\014\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6\042" +
    "\uffb6\001\002\000\024\011\uffb4\013\uffb4\014\uffb4\020\uffb4" +
    "\021\uffb4\023\uffb4\024\uffb4\025\uffb4\042\uffb4\001\002\000" +
    "\024\011\uffb5\013\uffb5\014\uffb5\020\uffb5\021\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\042\uffb5\001\002\000\004\014\057\001" +
    "\002\000\024\011\uffb3\013\uffb3\014\uffb3\020\uffb3\021\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\042\uffb3\001\002\000\032\003" +
    "\026\015\ufff0\027\031\030\022\031\016\034\035\040\023" +
    "\043\033\052\017\055\034\056\024\057\027\001\002\000" +
    "\004\015\061\001\002\000\010\003\046\047\050\050\045" +
    "\001\002\000\004\035\uffab\001\002\000\032\003\026\015" +
    "\ufff0\027\031\030\022\031\016\034\035\040\023\043\033" +
    "\052\017\055\034\056\024\057\027\001\002\000\004\015" +
    "\065\001\002\000\010\003\046\047\050\050\045\001\002" +
    "\000\004\035\uffac\001\002\000\036\003\uffad\015\uffad\020" +
    "\uffad\027\uffad\030\uffad\031\uffad\034\uffad\040\uffad\043\uffad" +
    "\051\uffad\052\uffad\055\uffad\056\uffad\057\uffad\001\002\000" +
    "\032\003\026\015\ufff0\027\031\030\022\031\016\034\035" +
    "\040\023\043\033\052\017\055\034\056\024\057\027\001" +
    "\002\000\004\015\072\001\002\000\004\035\uffaa\001\002" +
    "\000\014\010\056\026\054\036\052\037\053\052\074\001" +
    "\002\000\004\013\100\001\002\000\004\013\076\001\002" +
    "\000\004\011\077\001\002\000\036\003\uffc5\015\uffc5\020" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\034\uffc5\040\uffc5\043\uffc5" +
    "\051\uffc5\052\uffc5\055\uffc5\056\uffc5\057\uffc5\001\002\000" +
    "\004\011\101\001\002\000\036\003\uffc6\015\uffc6\020\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\034\uffc6\040\uffc6\043\uffc6\051" +
    "\uffc6\052\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002\000\004" +
    "\052\uffc0\001\002\000\004\016\133\001\002\000\004\052" +
    "\uffbf\001\002\000\004\052\uffbe\001\002\000\004\052\uffc1" +
    "\001\002\000\004\052\110\001\002\000\006\011\112\016" +
    "\111\001\002\000\016\003\115\010\056\026\054\036\052" +
    "\037\053\052\113\001\002\000\036\003\uffff\015\uffff\020" +
    "\uffff\027\uffff\030\uffff\031\uffff\034\uffff\040\uffff\043\uffff" +
    "\051\uffff\052\uffff\055\uffff\056\uffff\057\uffff\001\002\000" +
    "\006\011\122\012\121\001\002\000\004\011\120\001\002" +
    "\000\006\011\uffc7\013\uffc7\001\002\000\004\011\117\001" +
    "\002\000\036\003\ufffe\015\ufffe\020\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\034\ufffe\040\ufffe\043\ufffe\051\ufffe\052\ufffe\055" +
    "\ufffe\056\ufffe\057\ufffe\001\002\000\036\003\ufffc\015\ufffc" +
    "\020\ufffc\027\ufffc\030\ufffc\031\ufffc\034\ufffc\040\ufffc\043" +
    "\ufffc\051\ufffc\052\ufffc\055\ufffc\056\ufffc\057\ufffc\001\002" +
    "\000\010\003\124\013\126\052\123\001\002\000\036\003" +
    "\ufffd\015\ufffd\020\ufffd\027\ufffd\030\ufffd\031\ufffd\034\ufffd" +
    "\040\ufffd\043\ufffd\051\ufffd\052\ufffd\055\ufffd\056\ufffd\057" +
    "\ufffd\001\002\000\006\013\uffd6\021\uffd6\001\002\000\004" +
    "\013\uffd7\001\002\000\004\013\132\001\002\000\006\011" +
    "\uffc8\013\uffc8\001\002\000\006\013\uffd8\021\130\001\002" +
    "\000\006\003\124\052\123\001\002\000\004\013\uffd9\001" +
    "\002\000\006\011\uffc9\013\uffc9\001\002\000\004\054\134" +
    "\001\002\000\004\053\135\001\002\000\004\012\136\001" +
    "\002\000\004\036\137\001\002\000\004\013\140\001\002" +
    "\000\006\011\143\017\141\001\002\000\014\010\056\017" +
    "\141\026\054\036\052\037\053\001\002\000\004\011\144" +
    "\001\002\000\036\003\uffbd\015\uffbd\020\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\034\uffbd\040\uffbd\043\uffbd\051\uffbd\052\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\001\002\000\036\003\uffbc\015" +
    "\uffbc\020\uffbc\027\uffbc\030\uffbc\031\uffbc\034\uffbc\040\uffbc" +
    "\043\uffbc\051\uffbc\052\uffbc\055\uffbc\056\uffbc\057\uffbc\001" +
    "\002\000\006\020\uffb7\021\uffb7\001\002\000\006\020\uffb9" +
    "\021\154\001\002\000\004\021\152\001\002\000\004\020" +
    "\151\001\002\000\010\011\uffbb\020\uffbb\021\uffbb\001\002" +
    "\000\004\017\141\001\002\000\004\020\uffb8\001\002\000" +
    "\014\010\056\017\141\026\054\036\052\037\053\001\002" +
    "\000\004\020\uffba\001\002\000\004\052\157\001\002\000" +
    "\004\045\160\001\002\000\004\036\161\001\002\000\004" +
    "\046\162\001\002\000\004\046\163\001\002\000\004\046" +
    "\164\001\002\000\004\036\165\001\002\000\004\013\166" +
    "\001\002\000\004\042\167\001\002\000\004\014\170\001" +
    "\002\000\032\003\026\015\ufff0\027\031\030\022\031\016" +
    "\034\035\040\023\043\033\052\017\055\034\056\024\057" +
    "\027\001\002\000\004\015\172\001\002\000\036\003\ufff3" +
    "\015\ufff3\020\ufff3\027\ufff3\030\ufff3\031\ufff3\034\ufff3\040" +
    "\ufff3\043\ufff3\051\ufff3\052\ufff3\055\ufff3\056\ufff3\057\ufff3" +
    "\001\002\000\034\003\uffd0\015\uffd0\020\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\034\uffd0\040\uffd0\043\uffd0\052\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\001\002\000\004\052\175\001\002\000" +
    "\004\013\176\001\002\000\004\011\177\001\002\000\036" +
    "\003\uffc2\015\uffc2\020\uffc2\027\uffc2\030\uffc2\031\uffc2\034" +
    "\uffc2\040\uffc2\043\uffc2\051\uffc2\052\uffc2\055\uffc2\056\uffc2" +
    "\057\uffc2\001\002\000\034\003\ufff4\015\ufff4\020\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\034\ufff4\040\ufff4\043\ufff4\052\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\001\002\000\034\003\uffca\015" +
    "\uffca\020\uffca\027\uffca\030\uffca\031\uffca\034\uffca\040\uffca" +
    "\043\uffca\052\uffca\055\uffca\056\uffca\057\uffca\001\002\000" +
    "\014\010\056\026\054\036\052\037\053\052\203\001\002" +
    "\000\004\013\207\001\002\000\004\013\205\001\002\000" +
    "\004\011\206\001\002\000\036\003\uffc3\015\uffc3\020\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\034\uffc3\040\uffc3\043\uffc3\051" +
    "\uffc3\052\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002\000\004" +
    "\011\210\001\002\000\036\003\uffc4\015\uffc4\020\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\034\uffc4\040\uffc4\043\uffc4\051\uffc4" +
    "\052\uffc4\055\uffc4\056\uffc4\057\uffc4\001\002\000\004\052" +
    "\234\001\002\000\004\052\213\001\002\000\004\012\214" +
    "\001\002\000\016\003\221\004\106\005\102\006\104\007" +
    "\105\013\216\001\002\000\006\013\uffdc\021\232\001\002" +
    "\000\004\017\227\001\002\000\004\013\223\001\002\000" +
    "\004\052\222\001\002\000\004\013\uffdb\001\002\000\006" +
    "\013\uffda\021\uffda\001\002\000\004\017\224\001\002\000" +
    "\032\003\026\020\ufff0\027\031\030\022\031\016\034\035" +
    "\040\023\043\033\052\017\055\034\056\024\057\027\001" +
    "\002\000\004\020\226\001\002\000\034\003\ufff6\015\ufff6" +
    "\020\ufff6\027\ufff6\030\ufff6\031\ufff6\034\ufff6\040\ufff6\043" +
    "\ufff6\052\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002\000\032" +
    "\003\026\020\ufff0\027\031\030\022\031\016\034\035\040" +
    "\023\043\033\052\017\055\034\056\024\057\027\001\002" +
    "\000\004\020\231\001\002\000\034\003\ufff5\015\ufff5\020" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\034\ufff5\040\ufff5\043\ufff5" +
    "\052\ufff5\055\ufff5\056\ufff5\057\ufff5\001\002\000\014\003" +
    "\221\004\106\005\102\006\104\007\105\001\002\000\004" +
    "\013\uffdd\001\002\000\004\012\235\001\002\000\016\003" +
    "\221\004\106\005\102\006\104\007\105\013\236\001\002" +
    "\000\004\017\332\001\002\000\004\013\240\001\002\000" +
    "\004\017\241\001\002\000\032\003\255\020\uffed\027\031" +
    "\030\253\031\016\034\035\043\033\051\243\052\017\055" +
    "\034\056\024\057\027\001\002\000\032\003\255\020\uffed" +
    "\027\031\030\253\031\016\034\035\043\033\051\243\052" +
    "\017\055\034\056\024\057\027\001\002\000\004\012\323" +
    "\001\002\000\032\003\uffe9\020\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\034\uffe9\043\uffe9\051\uffe9\052\uffe9\055\uffe9\056\uffe9" +
    "\057\uffe9\001\002\000\032\003\uffe4\020\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\034\uffe4\043\uffe4\051\uffe4\052\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\001\002\000\032\003\uffe2\020\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\034\uffe2\043\uffe2\051\uffe2\052\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\001\002\000\032\003\uffe3\020" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\034\uffe3\043\uffe3\051\uffe3" +
    "\052\uffe3\055\uffe3\056\uffe3\057\uffe3\001\002\000\032\003" +
    "\uffe5\020\uffe5\027\uffe5\030\uffe5\031\uffe5\034\uffe5\043\uffe5" +
    "\051\uffe5\052\uffe5\055\uffe5\056\uffe5\057\uffe5\001\002\000" +
    "\004\020\322\001\002\000\032\003\uffe8\020\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\034\uffe8\043\uffe8\051\uffe8\052\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\001\002\000\024\003\271\010\056" +
    "\012\266\024\263\026\054\036\052\037\053\044\273\052" +
    "\270\001\002\000\032\003\uffe6\020\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\034\uffe6\043\uffe6\051\uffe6\052\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\001\002\000\034\003\255\011\uffc7\020\uffed" +
    "\027\031\030\253\031\016\034\035\043\033\051\243\052" +
    "\017\055\034\056\024\057\027\001\002\000\004\011\261" +
    "\001\002\000\032\003\uffeb\020\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\034\uffeb\043\uffeb\051\uffeb\052\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\001\002\000\032\003\uffea\020\uffea\027\uffea\030" +
    "\uffea\031\uffea\034\uffea\043\uffea\051\uffea\052\uffea\055\uffea" +
    "\056\uffea\057\uffea\001\002\000\032\003\uffe7\020\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\034\uffe7\043\uffe7\051\uffe7\052\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\001\002\000\004\020\uffee\001" +
    "\002\000\020\010\uff9b\012\uff9b\026\uff9b\036\uff9b\037\uff9b" +
    "\044\uff9b\052\uff9b\001\002\000\016\013\uff9e\021\uff9e\023" +
    "\uff9e\024\uff9e\025\uff9e\042\uff9e\001\002\000\016\013\uffa5" +
    "\021\uffa5\023\uffa5\024\uffa5\025\301\042\uffa5\001\002\000" +
    "\024\003\271\010\056\012\266\024\263\026\054\036\052" +
    "\037\053\044\273\052\270\001\002\000\004\042\314\001" +
    "\002\000\020\012\306\013\uffa0\021\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\042\uffa0\001\002\000\010\013\uffa6\021\uffa6\042" +
    "\uffa6\001\002\000\016\013\uffa2\021\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\042\uffa2\001\002\000\020\010\056\012\266\026" +
    "\054\036\052\037\053\044\273\052\270\001\002\000\020" +
    "\010\056\012\266\026\054\036\052\037\053\044\273\052" +
    "\270\001\002\000\014\013\uffa8\021\uffa8\023\276\024\277" +
    "\042\uffa8\001\002\000\024\003\271\010\056\012\266\024" +
    "\263\026\054\036\052\037\053\044\273\052\270\001\002" +
    "\000\020\010\056\012\266\026\054\036\052\037\053\044" +
    "\273\052\270\001\002\000\016\013\uffa3\021\uffa3\023\uffa3" +
    "\024\uffa3\025\301\042\uffa3\001\002\000\020\010\056\012" +
    "\266\026\054\036\052\037\053\044\273\052\270\001\002" +
    "\000\016\013\uffa1\021\uffa1\023\uffa1\024\uffa1\025\uffa1\042" +
    "\uffa1\001\002\000\010\013\uffa7\021\uffa7\042\uffa7\001\002" +
    "\000\016\013\uffa4\021\uffa4\023\uffa4\024\uffa4\025\301\042" +
    "\uffa4\001\002\000\016\013\uff9c\021\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\042\uff9c\001\002\000\024\003\271\010\056\012" +
    "\266\024\263\026\054\036\052\037\053\044\273\052\270" +
    "\001\002\000\006\013\uff9a\021\uff9a\001\002\000\006\013" +
    "\312\021\311\001\002\000\024\003\271\010\056\012\266" +
    "\024\263\026\054\036\052\037\053\044\273\052\270\001" +
    "\002\000\016\013\uff9f\021\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\042\uff9f\001\002\000\006\013\uff99\021\uff99\001\002\000" +
    "\004\014\315\001\002\000\032\003\026\015\ufff0\027\031" +
    "\030\022\031\016\034\035\040\023\043\033\052\017\055" +
    "\034\056\024\057\027\001\002\000\004\015\317\001\002" +
    "\000\032\003\uffec\020\uffec\027\uffec\030\uffec\031\uffec\034" +
    "\uffec\043\uffec\051\uffec\052\uffec\055\uffec\056\uffec\057\uffec" +
    "\001\002\000\004\013\321\001\002\000\016\013\uff9d\021" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\042\uff9d\001\002\000\034" +
    "\003\ufff8\015\ufff8\020\ufff8\027\ufff8\030\ufff8\031\ufff8\034" +
    "\ufff8\040\ufff8\043\ufff8\052\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\001\002\000\016\003\115\010\056\026\054\036\052\037" +
    "\053\052\326\001\002\000\004\013\uffdf\001\002\000\004" +
    "\013\uffe0\001\002\000\006\012\121\013\uffde\001\002\000" +
    "\004\013\330\001\002\000\032\003\uffe1\020\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\034\uffe1\043\uffe1\051\uffe1\052\uffe1\055" +
    "\uffe1\056\uffe1\057\uffe1\001\002\000\004\020\uffef\001\002" +
    "\000\032\003\255\020\uffed\027\031\030\253\031\016\034" +
    "\035\043\033\051\243\052\017\055\034\056\024\057\027" +
    "\001\002\000\004\020\334\001\002\000\034\003\ufff7\015" +
    "\ufff7\020\ufff7\027\ufff7\030\ufff7\031\ufff7\034\ufff7\040\ufff7" +
    "\043\ufff7\052\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000" +
    "\004\042\336\001\002\000\004\014\337\001\002\000\032" +
    "\003\026\015\ufff0\027\031\030\022\031\016\034\035\040" +
    "\023\043\033\052\017\055\034\056\024\057\027\001\002" +
    "\000\004\015\341\001\002\000\034\003\uffd5\015\uffd5\020" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\034\uffd5\040\uffd5\043\uffd5" +
    "\052\uffd5\055\uffd5\056\uffd5\057\uffd5\001\002\000\004\002" +
    "\000\001\002\000\016\003\115\010\056\026\054\036\052" +
    "\037\053\052\344\001\002\000\006\011\351\012\121\001" +
    "\002\000\004\011\350\001\002\000\004\011\347\001\002" +
    "\000\036\003\ufffb\015\ufffb\020\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\034\ufffb\040\ufffb\043\ufffb\051\ufffb\052\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\001\002\000\036\003\ufff9\015\ufff9\020" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\034\ufff9\040\ufff9\043\ufff9" +
    "\051\ufff9\052\ufff9\055\ufff9\056\ufff9\057\ufff9\001\002\000" +
    "\036\003\ufffa\015\ufffa\020\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\034\ufffa\040\ufffa\043\ufffa\051\ufffa\052\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\001\002\000\024\003\271\010\056\012\266" +
    "\024\263\026\054\036\052\037\053\044\273\052\270\001" +
    "\002\000\004\013\354\001\002\000\004\014\355\001\002" +
    "\000\032\003\026\015\ufff0\027\031\030\022\031\016\034" +
    "\035\040\023\043\033\052\017\055\034\056\024\057\027" +
    "\001\002\000\004\015\357\001\002\000\040\003\uffb2\015" +
    "\uffb2\020\uffb2\027\uffb2\030\uffb2\031\uffb2\033\361\034\uffb2" +
    "\040\uffb2\043\uffb2\051\uffb2\052\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\001\002\000\036\003\uffb1\015\uffb1\020\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\034\uffb1\040\uffb1\043\uffb1\051\uffb1\052" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\001\002\000\006\014\364" +
    "\031\016\001\002\000\036\003\uffb0\015\uffb0\020\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\034\uffb0\040\uffb0\043\uffb0\051\uffb0" +
    "\052\uffb0\055\uffb0\056\uffb0\057\uffb0\001\002\000\036\003" +
    "\uffae\015\uffae\020\uffae\027\uffae\030\uffae\031\uffae\034\uffae" +
    "\040\uffae\043\uffae\051\uffae\052\uffae\055\uffae\056\uffae\057" +
    "\uffae\001\002\000\032\003\026\015\ufff0\027\031\030\022" +
    "\031\016\034\035\040\023\043\033\052\017\055\034\056" +
    "\024\057\027\001\002\000\004\015\366\001\002\000\036" +
    "\003\uffaf\015\uffaf\020\uffaf\027\uffaf\030\uffaf\031\uffaf\034" +
    "\uffaf\040\uffaf\043\uffaf\051\uffaf\052\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\001\002\000\006\015\ufff1\020\ufff1\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\024\011\017" +
    "\016\012\017\031\020\035\021\010\023\036\025\020\026" +
    "\007\034\014\042\011\043\013\047\027\001\001\000\034" +
    "\003\024\011\366\016\012\017\031\020\035\021\010\023" +
    "\036\025\020\026\007\034\014\042\011\043\013\047\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\334\007\263\027\274\030\264\031\273\032\271" +
    "\001\001\000\004\010\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\024\016\012\017\031\020\035" +
    "\021\010\023\200\025\020\026\177\034\014\042\011\043" +
    "\013\047\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\024\011\037\016\012\017\031\020\035\021" +
    "\010\023\036\025\020\026\007\034\014\042\011\043\013" +
    "\047\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\024\011\057\016\012\017\031" +
    "\020\035\021\010\023\036\025\020\026\007\034\014\042" +
    "\011\043\013\047\027\001\001\000\002\001\001\000\004" +
    "\035\061\001\001\000\002\001\001\000\034\003\024\011" +
    "\063\016\012\017\031\020\035\021\010\023\036\025\020" +
    "\026\007\034\014\042\011\043\013\047\027\001\001\000" +
    "\002\001\001\000\004\035\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\024\011\070\016\012\017" +
    "\031\020\035\021\010\023\036\025\020\026\007\034\014" +
    "\042\011\043\013\047\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\115" +
    "\047\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\124\015\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\130\015\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\141" +
    "\001\001\000\012\007\144\044\146\045\147\046\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\152\001\001" +
    "\000\002\001\001\000\012\007\144\044\146\045\154\046" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\024\011" +
    "\170\016\012\017\031\020\035\021\010\023\036\025\020" +
    "\026\007\034\014\042\011\043\013\047\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\217\012\216\013\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\024\011\224\016\012\017\031\020\035\021\010\023" +
    "\036\025\020\026\007\034\014\042\011\043\013\047\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\024\011\227\016\012\017\031\020\035\021\010\023\036" +
    "\025\020\026\007\034\014\042\011\043\013\047\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\217" +
    "\012\232\013\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\217\012\236\013\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\253\016\245\017\256\020\257\021\243\025\251\034\247" +
    "\036\250\037\241\042\244\043\246\047\255\001\001\000" +
    "\032\003\253\016\245\017\256\020\257\021\243\025\251" +
    "\034\247\036\330\037\241\042\244\043\246\047\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\266\007\263" +
    "\027\274\030\264\031\273\032\271\001\001\000\002\001" +
    "\001\000\032\003\253\016\245\017\256\020\257\021\243" +
    "\025\251\034\247\036\261\037\241\042\244\043\246\047" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\317" +
    "\007\263\027\274\030\264\031\273\032\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\263\032\304\001\001\000\010\007" +
    "\263\030\303\032\271\001\001\000\002\001\001\000\016" +
    "\006\302\007\263\027\274\030\264\031\273\032\271\001" +
    "\001\000\010\007\263\030\277\032\271\001\001\000\002" +
    "\001\001\000\006\007\263\032\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\306\007\263\027\274\030\264\031\273\032" +
    "\271\033\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\312\007\263\027\274\030\264\031\273\032" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\024\011\315\016\012\017\031\020" +
    "\035\021\010\023\036\025\020\026\007\034\014\042\011" +
    "\043\013\047\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\324\040\326\047\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\253\016" +
    "\245\017\256\020\257\021\243\025\251\034\247\036\332" +
    "\037\241\042\244\043\246\047\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\024\011\337\016\012\017\031\020\035\021" +
    "\010\023\036\025\020\026\007\034\014\042\011\043\013" +
    "\047\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\345\047\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\352" +
    "\007\263\027\274\030\264\031\273\032\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\024\011\355" +
    "\016\012\017\031\020\035\021\010\023\036\025\020\026" +
    "\007\034\014\042\011\043\013\047\027\001\001\000\002" +
    "\001\001\000\006\004\357\005\361\001\001\000\002\001" +
    "\001\000\004\003\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\024\011\364\016\012\017\031\020" +
    "\035\021\010\023\036\025\020\026\007\034\014\042\011" +
    "\043\013\047\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo arbol;
    public static int token=0;
    public static int parNum=0;
    
    public static int SintacticError =0;

    public String tokenes_id(int id){
        switch(id){
            case 0: return "EOF";
            case 1: return "error";
            case 2: return "VERDAD";
            case 3: return "NUMERITO";
            case 4: return "LETRA";
            case 5: return "WORD";
            case 6: return "PUNTOC";
            case 7: return "PARENTESISA";
            case 8: return "PARENTESISC";
            case 9: return "ABRIRC";
            case 10: return "CERRARC";
            case 11: return "ASSIGNMENT";
            case 12: return "BRACKETA";
            case 13: return "BRACKETC";
            case 14: return "COMMA";
            case 15: return "OPER";
            case 16: return "OPEA_SUM";
            case 17: return "OPEA_MULT";
            case 18: return "BOOL";
            case 19: return "FOR";
            case 20: return "WLE";
            case 21: return "IF";
            case 22: return "EIF";
            case 23: return "ELSE";
            case 24: return "BLOCK";
            case 25: return "END";
            case 26: return "NUM";
            case 27: return "LETTER";
            case 28: return "FUNC";
            case 29: return "START";
            case 30: return "FLECHA";
            case 31: return "VAR";
            case 32: return "NOT";
            case 33: return "IN";
            case 34: return "PUNTO";
            case 35: return "CASE";
            case 36: return "DEFAULT";
            case 37: return "REPLY";
            case 38: return "ID";
            case 39: return "ARRAY";
            case 40: return "NEW";
            case 41: return "THROW";
            case 42: return "THROWDOWN";
            case 43: return "CATCH";
            case 44: return "CADENA";
            default: return "Nothing";
        }
    }

         /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Columna " + (s.left) +
        " linear "+s.right+ ". No se esperaba este componente: " +s.value+".");
        
        SintacticError++;

        List expected =expected_token_ids();
        if(expected.size()!=0){
            int id;
            System.out.print("TOKEN ESPERADO..");
            for(int i=0;i<expected.size();i++){
                id = (int) expected.get(i);
                    if (i == expected.size() - 1) {
                        System.out.println(tokenes_id(id));
                    } else {
                        System.out.println(tokenes_id(id) + " | ");
                    }
            }
        }
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la columna " + 
        (s.left)+ " linear "+s.right+". Componente " + s.value + 
        " no reconocido.");
        System.out.println("Sintaxis mal escrito,irrecuperable"); 
    }  
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= START FLECHA BRACKETA body BRACKETC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo start = new Nodo("Start",token);
    parser.token ++;

    start.addHijo((Nodo)b);
 
    

    parser.arbol = start;
    RESULT = start;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declara_simple ::= VAR type ID PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        // Declaro el nodo declaración de variables
        Nodo decl = new Nodo("declaracion de variable",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(ide.toString(),parser.token);
        decl.addHijo(id);
        parser.token++;
        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_simple",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declara_assig ::= VAR type ID ASSIGNMENT valores PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo decl = new Nodo("declaracion y asignacion",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        Nodo val=new Nodo("valor",parser.token);
        parser.token++;
        val.addHijo((Nodo)va);
        decl.addHijo(val);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_assig",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declara_assig ::= VAR type ID ASSIGNMENT ID PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo decl = new Nodo("declaracion y asignacion",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        Nodo id2=new Nodo("id",parser.token);
        parser.token++;
        id2.addHijo(new Nodo(ide2.toString(),parser.token));
        decl.addHijo(id2);
        parser.token++;

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_assig",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declara_assig ::= VAR type ID ASSIGNMENT llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo decl = new Nodo("declaracion y asignacion",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        decl.addHijo((Nodo)f);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_assig",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // assig ::= ID ASSIGNMENT valores PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo decl = new Nodo("asignacion",  parser.token);
        parser.token++;
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        Nodo val=new Nodo("valor",parser.token);
        parser.token++;
        val.addHijo((Nodo)v);
        decl.addHijo(val);
        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assig",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assig ::= ID ASSIGNMENT ID PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo decl = new Nodo("asignacion",  parser.token);
        parser.token++;
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        Nodo id2=new Nodo("id",parser.token);
        parser.token++;
        id2.addHijo(new Nodo(ide2.toString(),parser.token));
        decl.addHijo(id2);
        parser.token++;
        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assig",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assig ::= ID ASSIGNMENT llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  
    Nodo decl = new Nodo("asignacion",  parser.token);
        parser.token++;
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        decl.addHijo((Nodo)f);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assig",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funciones ::= FUNC type ID PARENTESISA parametrosf PARENTESISC BRACKETA bodyf BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("declaración de funcion",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("función",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo((Nodo)t);

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;

    Nodo parametros = new Nodo("parametros",parser.token);
    parser.token++;
    parametros.addHijitos( ((Nodo)p).getHijos() );

    node.addHijo(parametros);
    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funciones ::= FUNC type ID PARENTESISA PARENTESISC BRACKETA bodyf BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("declaración de funcion",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("funcion",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo((Nodo)t);

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;
    
    Nodo vacio = new Nodo("Vacio",parser.token);
    parser.token++;

    Nodo parametros = new Nodo("parametros",parser.token);
    parser.token++;
    parametros.addHijo(vacio);
    
    node.addHijo(parametros);

    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funciones ::= FUNC VOID ID PARENTESISA parametrosf PARENTESISC BRACKETA body BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("declaración de funcion",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("función",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo(t.toString(),parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;

    Nodo parametros = new Nodo("parametros",parser.token);
    parser.token++;
    parametros.addHijitos( ((Nodo)p).getHijos() );

    node.addHijo(parametros);
    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funciones ::= FUNC VOID ID PARENTESISA PARENTESISC BRACKETA body BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("declaración de funcion",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("funcion",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo(t.toString(),parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;
    
    Nodo vacio = new Nodo("Vacio",parser.token);
    parser.token++;

    Nodo parametros = new Nodo("parametros",parser.token);
    parser.token++;
    parametros.addHijo(vacio);
    
    node.addHijo(parametros);

    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funciones ::= error funciones 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo fun = new Nodo("funcion",parser.token);
    parser.token++;

    fun.addHijo("Error",parser.token);

    if(f!=null){
        fun.addHijitos(((Nodo)f).getHijos());
    }

     RESULT = fun;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CicloFor ::= FOR PARENTESISA ID IN NUM PUNTO PUNTO PUNTO NUM PARENTESISC FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo ciclo = new Nodo("declaración ciclo for",parser.token);
        parser.token++;

        Nodo ID=new Nodo("id",parser.token);
        parser.token++;
        ID.addHijo(ide.toString(),parser.token);
        
        ciclo.addHijo(ID);
        parser.token++;
 
        Nodo num1=new Nodo("num",parser.token);
        parser.token++;
        num1.addHijo(n.toString(),parser.token);
        parser.token++;
        ciclo.addHijo(num1);

        Nodo num2=new Nodo("num",parser.token);
        parser.token++;
        num2.addHijo(n1.toString(),parser.token);
        parser.token++;
        ciclo.addHijo(num2);

        ciclo.addHijo((Nodo)b);

        RESULT= ciclo;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CicloFor",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body ::= proposition body 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo bodyn = new Nodo("body",  parser.token);
        parser.token++;
        bodyn.addHijo((Nodo) p);
        
        if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }

        RESULT = bodyn;
                

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body ::= funciones body 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo funciones=new Nodo("Funciones",parser.token);
    parser.token++;

    funciones.addHijo((Nodo)f);

    if(b!=null){
        funciones.addHijitos(((Nodo)b).getHijos());
    }

    RESULT= funciones;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body ::= 
            {
              Object RESULT =null;
		
    Nodo node=new Nodo("Vacio",parser.token);
    parser.token++;
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bodyf ::= propositionf bodyf 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo bodyn = new Nodo("body",  parser.token);
        parser.token++;

        bodyn.addHijo((Nodo) p);
        
        if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }

        RESULT = bodyn;
                

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyf",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bodyf ::= error bodyf 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo bodyn = new Nodo("body",  parser.token);
    parser.token++;
    bodyn.addHijo("Error",parser.token);
    parser.token++;
    if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }
    RESULT=bodyn;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyf",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bodyf ::= 
            {
              Object RESULT =null;
		
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyf",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // propositionf ::= WLE expression FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("declaración ciclo while",parser.token);
    parser.token++;

    Nodo whil=new Nodo("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)b);

    RESULT= node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // propositionf ::= declara_simple 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)d;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // propositionf ::= declara_assig 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // propositionf ::= assig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)a;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // propositionf ::= CicloFor 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)cf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // propositionf ::= llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    RESULT=lf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // propositionf ::= ifState 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = ife;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // propositionf ::= block_switch 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=b;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // propositionf ::= print 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=p;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // propositionf ::= catch 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=c;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // propositionf ::= declara_array 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // propositionf ::= REPLY PARENTESISA devolverFunc PARENTESISC 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("reply",parser.token);
    parser.token++;
    node.addHijo((Nodo)df);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // devolverFunc ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=v;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("devolverFunc",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // devolverFunc ::= llamadaFunc 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=lf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("devolverFunc",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // devolverFunc ::= ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo ID = new Nodo("id",parser.token);
    parser.token++;

    ID.addHijo(ide.toString(),parser.token);
    
    parser.token++;

    RESULT = ID;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("devolverFunc",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametrosf ::= parametrof COMMA parametrosf 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametros",parser.token);
    parser.token++;
    node.addHijo((Nodo)p);
    node.addHijitos(((Nodo)ps).getHijos());
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametrosf",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametrosf ::= parametrof 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametros",parser.token);
    parser.token++;
    node.addHijo((Nodo)p);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametrosf",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametrosf ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("error parametro",parser.token);
    parser.token++;
    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametrosf",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametrof ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo param = new Nodo("Parametro",parser.token);
    parser.token++;
    param.addHijo((Nodo)t);
    Nodo nom = new Nodo(""+id,parser.token);
    parser.token++;
    param.addHijo(nom);
    RESULT = param;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametrof",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= parametro COMMA parametros 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametros",parser.token);
    parser.token++;
    node.addHijo((Nodo)p);
    node.addHijitos(((Nodo)ps).getHijos());
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametros",parser.token);
    parser.token++;
    node.addHijo((Nodo)p);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("error parametro",parser.token);
    parser.token++;
    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametro ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo param = new Nodo("Parametro",parser.token);
    parser.token++;
    Nodo nom =new Nodo(""+id,parser.token);
    parser.token++;
    param.addHijo(nom);
    RESULT=param;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // proposition ::= WLE expression FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("declaración ciclo while",parser.token);
    parser.token++;

    Nodo whil=new Nodo("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // proposition ::= declara_simple 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)d;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // proposition ::= declara_assig 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // proposition ::= assig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)a;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // proposition ::= CicloFor 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)cf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // proposition ::= llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        RESULT=lf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // proposition ::= ifState 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = ife;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // proposition ::= block_switch 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=b;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // proposition ::= print 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=p;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // proposition ::= catch 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=c;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // proposition ::= declara_array 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // proposition ::= error proposition 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("Error ",parser.token);
    parser.token++;

    if(p!=null){
        node.addHijitos(((Nodo)p).getHijos());
    }

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // llamadaFunc ::= ID PARENTESISA parametros PARENTESISC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("llamada a funcion",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    node.addHijo((Nodo)p);

    RESULT = node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamadaFunc",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // llamadaFunc ::= ID PARENTESISA PARENTESISC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("llamada a funcion",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo p=new Nodo("Vacio",parser.token);
    parser.token++;

    node.addHijo((Nodo)p);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamadaFunc",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llamadaFunc ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("error llamada a funcion",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamadaFunc",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // print ::= THROW PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("throw",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // print ::= THROW PARENTESISA valores PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("throw",parser.token);
    parser.token++;

    node.addHijo((Nodo)v);
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // print ::= THROWDOWN PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("throwdown",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // print ::= THROWDOWN PARENTESISA valores PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("throwdown",parser.token);
    parser.token++;

    node.addHijo((Nodo)v);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // catch ::= CATCH PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("catch",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("catch",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= VERDAD 
            {
              Object RESULT =null;
		
    
    Nodo node = new Nodo("booleano",  parser.token);
    parser.token++;
    RESULT = node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= NUMERITO 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("entero",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= LETRA 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("caracter",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= WORD 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("string",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA NUM PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		

    Nodo node = new Nodo("declaración array",parser.token);
    parser.token++;

    Nodo array=new Nodo("array()",parser.token);
    parser.token++;
    node.addHijo(array); 

    Nodo id=new Nodo("id",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    Nodo num2=new Nodo("indice",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_array",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA NUM PARENTESISC bracket_valores PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object bv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("declaración array",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo num2=new Nodo("indice",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);

    
 
    node.addHijo((Nodo)bv);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_array",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bracket_valores ::= BRACKETA list_valores BRACKETC 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    RESULT=lv;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bracket_valores",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // list_valores ::= arrayData COMMA list_valores 
            {
              Object RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);

    if(lv!=null){
        node.addHijitos(((Nodo)lv).getHijos());
    }
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_valores",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // list_valores ::= arrayData 
            {
              Object RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_valores",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // list_valores ::= bracket_valores COMMA bracket_valores 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("dos dimensiones",parser.token);
    parser.token++;

    node.addHijo((Nodo)b);
    node.addHijo((Nodo)b1);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_valores",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arrayData ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=v;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arrayData",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valores ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("num",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+n,parser.token);
    parser.token++;

    node.addHijo(valor);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valores ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("bool",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+b,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valores ::= LETTER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("letter",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+l,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valores ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    String cadenita = c.toString().replace("\"","");
    Nodo node=new Nodo("string",parser.token);
    parser.token++;
    Nodo valor = new Nodo(cadenita,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ifState ::= IF PARENTESISA expression PARENTESISC ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("declaración if",parser.token);
    parser.token++;
    Nodo ife= new Nodo("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Nodo)e);
    if (b!=null) node.addHijo((Nodo)b);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifState",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ifState ::= IF PARENTESISA expression PARENTESISC ABRIRC body CERRARC else_n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("declaración if",parser.token);
    parser.token++;
    Nodo ife=new Nodo("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Nodo)e);
    if (b!=null) node.addHijo((Nodo)b);
    node.addHijo((Nodo)el);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifState",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ifState ::= IF PARENTESISA expression PARENTESISC ABRIRC body CERRARC elseif 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("declaración if",parser.token);
    parser.token++;
    Nodo ife=new Nodo("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Nodo)e);
    if (b!=null) node.addHijo((Nodo)b);
    node.addHijo((Nodo)el);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifState",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // else_n ::= ELSE ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("else",parser.token);
    parser.token++;
    if (b!=null) node.addHijo((Nodo)b);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_n",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elseif ::= ELSE ifState 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("else if",parser.token);
    parser.token++;
    node.addHijitos(((Nodo)i).getHijos());
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elseif",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // block_switch ::= BLOCK PARENTESISA ID PARENTESISC FLECHA cases END 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("declaración bloque switch",parser.token);
    parser.token++;

    Nodo block=new Nodo("Block",parser.token);
    parser.token++;
    node.addHijo(block);
 
    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
   
    node.addHijo((Nodo)c);

    Nodo end=new Nodo("end",parser.token);
    parser.token++;
    node.addHijo(end);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("block_switch",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cases ::= CASE ID ABRIRC body CERRARC cases 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    Nodo node=new Nodo("case body",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    
    Nodo id=new Nodo("id",parser.token);
    parser.token++;
    cas.addHijo(ide.toString(),parser.token);
    parser.token++;
 
    cas.addHijo((Nodo)b);
 
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }
    
    node.addHijo(cas);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cases ::= CASE valores ABRIRC body CERRARC cases 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    node.addHijo(cas);

    node.addHijo((Nodo)v);
 
    node.addHijo((Nodo)b);
  
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }

    RESULT= node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cases ::= DEFAULT ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;
 
    node.addHijo((Nodo)b);
 
    RESULT=node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cases ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("Erros-case",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= expression_simple 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=es;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression_simple OPER expression 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node =new Nodo("expresión simple",parser.token);
    parser.token++;
    node.addHijo((Nodo)es);

    node.addHijo(op.toString(),parser.token);
    parser.token++;

    if(ex!=null){
        node.addHijitos(((Nodo)ex).getHijos());
    }
    
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("error expresión",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression_simple ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  
    RESULT=t;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression_simple",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression_simple ::= signo termino 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=(Nodo)t;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression_simple",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression_simple ::= expression_simple OPEA_SUM termino 
            {
              Object RESULT =null;
		int exsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("expresión simple",parser.token);
    parser.token++;

    if(exs!=null){
        node.addHijitos(((Nodo)exs).getHijos());
    }

    Nodo opea_sum=new Nodo("operador suma/resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;
    node.addHijo(opea_sum);

    node.addHijo((Nodo)t);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression_simple",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=f;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // termino ::= termino OPEA_MULT factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node =new Nodo("termino",parser.token);
    parser.token++;
    if(t!=null){
        node.addHijitos(((Nodo)t).getHijos());
    }
    Nodo opea_mult=new Nodo("operador multiplicacion/division",parser.token);
    parser.token++;

    opea_mult.addHijo(op.toString(),parser.token++);
    parser.token++;

    node.addHijo(opea_mult);

    node.addHijo((Nodo)f);

    RESULT=node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= ID PARENTESISA list_expression PARENTESISC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
    

    node.addHijo((Nodo)list);
   
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=v;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= PARENTESISA expression PARENTESISC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;
    node.addHijo((Nodo)e);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo not=new Nodo("Not",parser.token);
    parser.token++;
    not.addHijo(n.toString(),parser.token);

    if(f!=null){
        node.addHijitos(((Nodo)f).getHijos());
    }

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // signo ::= OPEA_SUM 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node= new Nodo("Signo",parser.token);
    parser.token++;

    Nodo opea_sum=new Nodo("Operacion Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;

    node.addHijo(opea_sum);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // list_expression ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Lista de Expresiones",parser.token);
    parser.token++;
    node.addHijo((Nodo)e);

    RESULT=e;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_expression",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // list_expression ::= list_expression COMMA expression 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Lista de Expresiones",parser.token);
    parser.token++;

    if(list!=null){
        node.addHijitos(((Nodo)list).getHijos());
    }
    Nodo coma=new Nodo(",",parser.token);
    parser.token++;
    node.addHijo(coma);

    node.addHijo((Nodo)e);
    
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_expression",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
