
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\022\007\000\002\036" +
    "\006\000\002\037\010\000\002\037\010\000\002\037\010" +
    "\000\002\037\010\000\002\040\010\000\002\041\006\000" +
    "\002\041\006\000\002\041\006\000\002\041\006\000\002" +
    "\042\006\000\002\015\004\000\002\016\005\000\002\016" +
    "\002\000\002\017\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\002\000\002\021\003\000\002\021\003\000" +
    "\002\021\005\000\002\010\004\000\002\011\005\000\002" +
    "\011\002\000\002\012\004\000\002\013\005\000\002\013" +
    "\002\000\002\014\003\000\002\014\003\000\002\014\005" +
    "\000\002\050\013\000\002\050\012\000\002\050\013\000" +
    "\002\050\012\000\002\050\004\000\002\047\020\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\006" +
    "\004\000\002\006\002\000\002\003\005\000\002\005\004" +
    "\000\002\005\002\000\002\004\012\000\002\031\004\000" +
    "\002\031\002\000\002\060\004\000\002\060\004\000\002" +
    "\060\002\000\002\002\006\000\002\061\010\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\004\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\006\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\032\005" +
    "\000\002\032\003\000\002\032\003\000\002\033\004\000" +
    "\002\034\005\000\002\034\003\000\002\034\003\000\002" +
    "\035\003\000\002\045\010\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\004\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\004\000\002\071" +
    "\006\000\002\071\005\000\002\071\003\000\002\064\007" +
    "\000\002\064\007\000\002\064\007\000\002\064\007\000" +
    "\002\065\007\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\043\013\000\002\043" +
    "\014\000\002\066\005\000\002\067\005\000\002\067\003" +
    "\000\002\067\005\000\002\070\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\023\011\000\002\023\012\000\002\023\012\000\002\024" +
    "\006\000\002\025\004\000\002\056\011\000\002\057\010" +
    "\000\002\057\010\000\002\057\006\000\002\057\003\000" +
    "\002\026\003\000\002\026\005\000\002\026\003\000\002" +
    "\051\003\000\002\051\004\000\002\051\005\000\002\052" +
    "\003\000\002\052\005\000\002\054\003\000\002\054\006" +
    "\000\002\054\003\000\002\054\005\000\002\054\004\000" +
    "\002\053\003\000\002\055\003\000\002\055\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\004\041\005\001\002\000\004\002\u0123\001" +
    "\002\000\004\042\006\001\002\000\004\017\007\001\002" +
    "\000\006\040\uffd7\043\010\001\002\000\012\004\101\005" +
    "\075\006\076\007\100\001\002\000\004\040\022\001\002" +
    "\000\006\040\uffdb\043\uffdb\001\002\000\004\020\020\001" +
    "\002\000\006\040\uffd7\043\010\001\002\000\006\040\uffda" +
    "\043\uffda\001\002\000\006\040\uffd9\043\uffd9\001\002\000" +
    "\004\040\uffd8\001\002\000\004\002\000\001\002\000\010" +
    "\003\341\020\uffd4\040\340\001\002\000\004\022\023\001" +
    "\002\000\004\055\024\001\002\000\004\012\025\001\002" +
    "\000\004\013\026\001\002\000\004\017\027\001\002\000" +
    "\030\003\045\020\uffd1\027\052\030\041\031\035\034\053" +
    "\043\055\052\036\056\056\057\042\060\047\001\002\000" +
    "\032\003\uffa8\015\uffa8\020\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\034\uffa8\043\uffa8\052\uffa8\056\uffa8\057\uffa8\060\uffa8\001" +
    "\002\000\032\003\uffae\015\uffae\020\uffae\027\uffae\030\uffae" +
    "\031\uffae\034\uffae\043\uffae\052\uffae\056\uffae\057\uffae\060" +
    "\uffae\001\002\000\032\003\uffa6\015\uffa6\020\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\034\uffa6\043\uffa6\052\uffa6\056\uffa6\057" +
    "\uffa6\060\uffa6\001\002\000\032\003\uffa7\015\uffa7\020\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\034\uffa7\043\uffa7\052\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\001\002\000\032\003\uffa9\015\uffa9" +
    "\020\uffa9\027\uffa9\030\uffa9\031\uffa9\034\uffa9\043\uffa9\052" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\001\002\000\004\012\323" +
    "\001\002\000\006\012\127\016\310\001\002\000\004\020" +
    "\307\001\002\000\032\003\uffac\015\uffac\020\uffac\027\uffac" +
    "\030\uffac\031\uffac\034\uffac\043\uffac\052\uffac\056\uffac\057" +
    "\uffac\060\uffac\001\002\000\010\012\252\036\246\052\247" +
    "\001\002\000\004\012\273\001\002\000\032\003\uffad\015" +
    "\uffad\020\uffad\027\uffad\030\uffad\031\uffad\034\uffad\043\uffad" +
    "\052\uffad\056\uffad\057\uffad\060\uffad\001\002\000\032\003" +
    "\uffaa\015\uffaa\020\uffaa\027\uffaa\030\uffaa\031\uffaa\034\uffaa" +
    "\043\uffaa\052\uffaa\056\uffaa\057\uffaa\060\uffaa\001\002\000" +
    "\030\003\045\011\uffa2\027\052\030\041\031\035\034\053" +
    "\043\055\052\036\056\056\057\042\060\047\001\002\000" +
    "\032\003\uffaf\015\uffaf\020\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\034\uffaf\043\uffaf\052\uffaf\056\uffaf\057\uffaf\060\uffaf\001" +
    "\002\000\006\012\242\016\241\001\002\000\004\011\240" +
    "\001\002\000\032\003\uffb2\015\uffb2\020\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\034\uffb2\043\uffb2\052\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\001\002\000\004\012\223\001\002\000\004\012" +
    "\175\001\002\000\032\003\uffb1\015\uffb1\020\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\034\uffb1\043\uffb1\052\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\001\002\000\014\004\101\005\075\006\076" +
    "\007\100\052\077\001\002\000\004\012\062\001\002\000" +
    "\032\003\uffb0\015\uffb0\020\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\034\uffb0\043\uffb0\052\uffb0\056\uffb0\057\uffb0\060\uffb0\001" +
    "\002\000\032\003\045\015\uffd1\020\uffd1\027\052\030\041" +
    "\031\035\034\053\043\055\052\036\056\056\057\042\060" +
    "\047\001\002\000\006\015\uffd2\020\uffd2\001\002\000\014" +
    "\010\070\026\066\036\064\037\065\052\063\001\002\000" +
    "\004\013\073\001\002\000\012\013\uff91\014\uff91\020\uff91" +
    "\021\uff91\001\002\000\012\013\uff8f\014\uff8f\020\uff8f\021" +
    "\uff8f\001\002\000\012\013\uff90\014\uff90\020\uff90\021\uff90" +
    "\001\002\000\004\013\071\001\002\000\012\013\uff8e\014" +
    "\uff8e\020\uff8e\021\uff8e\001\002\000\004\011\072\001\002" +
    "\000\034\003\uffa0\015\uffa0\020\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\034\uffa0\043\uffa0\051\uffa0\052\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\001\002\000\004\011\074\001\002\000\034\003" +
    "\uffa1\015\uffa1\020\uffa1\027\uffa1\030\uffa1\031\uffa1\034\uffa1" +
    "\043\uffa1\051\uffa1\052\uffa1\056\uffa1\057\uffa1\060\uffa1\001" +
    "\002\000\004\052\uff9b\001\002\000\004\052\uff9a\001\002" +
    "\000\004\016\152\001\002\000\004\052\uff99\001\002\000" +
    "\004\052\uff9c\001\002\000\004\052\103\001\002\000\006" +
    "\011\105\016\104\001\002\000\020\003\116\010\106\012" +
    "\114\026\111\036\107\037\112\052\115\001\002\000\036" +
    "\003\uffff\015\uffff\020\uffff\027\uffff\030\uffff\031\uffff\034" +
    "\uffff\040\uffff\043\uffff\051\uffff\052\uffff\056\uffff\057\uffff" +
    "\060\uffff\001\002\000\004\011\151\001\002\000\012\011" +
    "\uffe4\013\uffe4\024\uffe4\025\uffe4\001\002\000\004\011\150" +
    "\001\002\000\004\011\147\001\002\000\004\011\146\001" +
    "\002\000\010\011\uffe8\013\uffe8\024\143\001\002\000\010" +
    "\012\114\036\107\052\124\001\002\000\012\011\uffe3\012" +
    "\127\024\uffe3\025\uffe3\001\002\000\006\011\uffa2\013\uffa2" +
    "\001\002\000\012\011\uffe5\013\uffe5\024\uffe5\025\122\001" +
    "\002\000\004\011\121\001\002\000\036\003\ufffa\015\ufffa" +
    "\020\ufffa\027\ufffa\030\ufffa\031\ufffa\034\ufffa\040\ufffa\043" +
    "\ufffa\051\ufffa\052\ufffa\056\ufffa\057\ufffa\060\ufffa\001\002" +
    "\000\010\012\114\036\107\052\124\001\002\000\010\011" +
    "\uffe7\013\uffe7\024\uffe7\001\002\000\012\011\uffe3\013\uffe3" +
    "\024\uffe3\025\uffe3\001\002\000\012\011\uffe5\013\uffe5\024" +
    "\uffe5\025\122\001\002\000\010\011\uffe6\013\uffe6\024\uffe6" +
    "\001\002\000\010\003\132\013\133\052\130\001\002\000" +
    "\006\013\uffb4\021\uffb4\001\002\000\004\013\137\001\002" +
    "\000\004\013\uffb5\001\002\000\006\011\uffa3\013\uffa3\001" +
    "\002\000\006\013\uffb6\021\135\001\002\000\006\003\132" +
    "\052\130\001\002\000\004\013\uffb7\001\002\000\006\011" +
    "\uffa4\013\uffa4\001\002\000\004\013\141\001\002\000\012" +
    "\011\uffe2\013\uffe2\024\uffe2\025\uffe2\001\002\000\006\011" +
    "\uffea\013\uffea\001\002\000\010\012\114\036\107\052\124" +
    "\001\002\000\010\011\uffe8\013\uffe8\024\143\001\002\000" +
    "\006\011\uffe9\013\uffe9\001\002\000\036\003\ufffd\015\ufffd" +
    "\020\ufffd\027\ufffd\030\ufffd\031\ufffd\034\ufffd\040\ufffd\043" +
    "\ufffd\051\ufffd\052\ufffd\056\ufffd\057\ufffd\060\ufffd\001\002" +
    "\000\036\003\ufffe\015\ufffe\020\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\034\ufffe\040\ufffe\043\ufffe\051\ufffe\052\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\001\002\000\036\003\ufffb\015\ufffb\020" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\034\ufffb\040\ufffb\043\ufffb" +
    "\051\ufffb\052\ufffb\056\ufffb\057\ufffb\060\ufffb\001\002\000" +
    "\036\003\ufffc\015\ufffc\020\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\034\ufffc\040\ufffc\043\ufffc\051\ufffc\052\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\001\002\000\004\054\153\001\002\000\004" +
    "\053\154\001\002\000\004\012\155\001\002\000\004\036" +
    "\156\001\002\000\004\013\157\001\002\000\006\011\162" +
    "\017\160\001\002\000\014\010\070\017\160\026\066\036" +
    "\064\037\065\001\002\000\004\011\163\001\002\000\034" +
    "\003\uff98\015\uff98\020\uff98\027\uff98\030\uff98\031\uff98\034" +
    "\uff98\043\uff98\051\uff98\052\uff98\056\uff98\057\uff98\060\uff98" +
    "\001\002\000\034\003\uff97\015\uff97\020\uff97\027\uff97\030" +
    "\uff97\031\uff97\034\uff97\043\uff97\051\uff97\052\uff97\056\uff97" +
    "\057\uff97\060\uff97\001\002\000\006\020\uff92\021\uff92\001" +
    "\002\000\006\020\uff94\021\173\001\002\000\004\021\171" +
    "\001\002\000\004\020\170\001\002\000\010\011\uff96\020" +
    "\uff96\021\uff96\001\002\000\004\017\160\001\002\000\004" +
    "\020\uff93\001\002\000\014\010\070\017\160\026\066\036" +
    "\064\037\065\001\002\000\004\020\uff95\001\002\000\004" +
    "\052\176\001\002\000\004\013\177\001\002\000\004\042" +
    "\200\001\002\000\010\003\202\047\204\050\201\001\002" +
    "\000\004\014\220\001\002\000\004\035\uff84\001\002\000" +
    "\004\035\217\001\002\000\014\010\070\026\066\036\064" +
    "\037\065\052\205\001\002\000\004\014\213\001\002\000" +
    "\004\014\207\001\002\000\030\003\045\015\uffd1\027\052" +
    "\030\041\031\035\034\053\043\055\052\036\056\056\057" +
    "\042\060\047\001\002\000\004\015\211\001\002\000\010" +
    "\003\202\047\204\050\201\001\002\000\004\035\uff86\001" +
    "\002\000\030\003\045\015\uffd1\027\052\030\041\031\035" +
    "\034\053\043\055\052\036\056\056\057\042\060\047\001" +
    "\002\000\004\015\215\001\002\000\010\003\202\047\204" +
    "\050\201\001\002\000\004\035\uff87\001\002\000\034\003" +
    "\uff88\015\uff88\020\uff88\027\uff88\030\uff88\031\uff88\034\uff88" +
    "\043\uff88\051\uff88\052\uff88\056\uff88\057\uff88\060\uff88\001" +
    "\002\000\030\003\045\015\uffd1\027\052\030\041\031\035" +
    "\034\053\043\055\052\036\056\056\057\042\060\047\001" +
    "\002\000\004\015\222\001\002\000\004\035\uff85\001\002" +
    "\000\004\052\224\001\002\000\004\045\225\001\002\000" +
    "\004\036\226\001\002\000\004\046\227\001\002\000\004" +
    "\046\230\001\002\000\004\046\231\001\002\000\004\036" +
    "\232\001\002\000\004\013\233\001\002\000\004\042\234" +
    "\001\002\000\004\014\235\001\002\000\030\003\045\015" +
    "\uffd1\027\052\030\041\031\035\034\053\043\055\052\036" +
    "\056\056\057\042\060\047\001\002\000\004\015\237\001" +
    "\002\000\034\003\uffdc\015\uffdc\020\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\034\uffdc\043\uffdc\051\uffdc\052\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\001\002\000\032\003\uffab\015\uffab\020\uffab" +
    "\027\uffab\030\uffab\031\uffab\034\uffab\043\uffab\052\uffab\056" +
    "\uffab\057\uffab\060\uffab\001\002\000\010\012\252\036\246" +
    "\052\247\001\002\000\004\052\243\001\002\000\004\013" +
    "\244\001\002\000\004\011\245\001\002\000\034\003\uff9d" +
    "\015\uff9d\020\uff9d\027\uff9d\030\uff9d\031\uff9d\034\uff9d\043" +
    "\uff9d\051\uff9d\052\uff9d\056\uff9d\057\uff9d\060\uff9d\001\002" +
    "\000\016\011\uffed\013\uffed\023\uffed\024\uffed\025\uffed\042" +
    "\uffed\001\002\000\016\011\uffec\013\uffec\023\uffec\024\uffec" +
    "\025\uffec\042\uffec\001\002\000\012\011\ufff2\013\ufff2\024" +
    "\266\042\ufff2\001\002\000\004\011\265\001\002\000\010" +
    "\012\252\036\246\052\247\001\002\000\016\011\uffee\013" +
    "\uffee\023\255\024\uffee\025\254\042\uffee\001\002\000\010" +
    "\012\252\036\246\052\247\001\002\000\010\012\252\036" +
    "\246\052\247\001\002\000\012\011\ufff1\013\ufff1\024\ufff1" +
    "\042\ufff1\001\002\000\016\011\uffee\013\uffee\023\255\024" +
    "\uffee\025\254\042\uffee\001\002\000\012\011\uffef\013\uffef" +
    "\024\uffef\042\uffef\001\002\000\016\011\uffee\013\uffee\023" +
    "\255\024\uffee\025\254\042\uffee\001\002\000\012\011\ufff0" +
    "\013\ufff0\024\ufff0\042\ufff0\001\002\000\004\013\264\001" +
    "\002\000\016\011\uffeb\013\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\042\uffeb\001\002\000\032\003\uffcd\015\uffcd\020\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\034\uffcd\043\uffcd\052\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\001\002\000\010\012\252\036\246\052" +
    "\247\001\002\000\010\011\ufff4\013\ufff4\042\ufff4\001\002" +
    "\000\012\011\ufff2\013\ufff2\024\266\042\ufff2\001\002\000" +
    "\010\011\ufff3\013\ufff3\042\ufff3\001\002\000\032\003\uffa5" +
    "\015\uffa5\020\uffa5\027\uffa5\030\uffa5\031\uffa5\034\uffa5\043" +
    "\uffa5\052\uffa5\056\uffa5\057\uffa5\060\uffa5\001\002\000\014" +
    "\010\070\026\066\036\064\037\065\052\274\001\002\000" +
    "\004\013\300\001\002\000\004\013\276\001\002\000\004" +
    "\011\277\001\002\000\034\003\uff9e\015\uff9e\020\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\034\uff9e\043\uff9e\051\uff9e\052\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\001\002\000\004\011\301\001" +
    "\002\000\034\003\uff9f\015\uff9f\020\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\034\uff9f\043\uff9f\051\uff9f\052\uff9f\056\uff9f\057" +
    "\uff9f\060\uff9f\001\002\000\004\042\303\001\002\000\004" +
    "\014\304\001\002\000\030\003\045\015\uffd1\027\052\030" +
    "\041\031\035\034\053\043\055\052\036\056\056\057\042" +
    "\060\047\001\002\000\004\015\306\001\002\000\032\003" +
    "\uffb3\015\uffb3\020\uffb3\027\uffb3\030\uffb3\031\uffb3\034\uffb3" +
    "\043\uffb3\052\uffb3\056\uffb3\057\uffb3\060\uffb3\001\002\000" +
    "\010\003\uffd3\020\uffd3\040\uffd3\001\002\000\020\003\116" +
    "\010\311\012\114\026\313\036\107\037\314\052\115\001" +
    "\002\000\004\011\322\001\002\000\004\011\321\001\002" +
    "\000\004\011\320\001\002\000\004\011\317\001\002\000" +
    "\004\011\316\001\002\000\034\003\ufff5\015\ufff5\020\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\034\ufff5\043\ufff5\051\ufff5\052" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\001\002\000\034\003\ufff8" +
    "\015\ufff8\020\ufff8\027\ufff8\030\ufff8\031\ufff8\034\ufff8\043" +
    "\ufff8\051\ufff8\052\ufff8\056\ufff8\057\ufff8\060\ufff8\001\002" +
    "\000\034\003\ufff9\015\ufff9\020\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\034\ufff9\043\ufff9\051\ufff9\052\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\001\002\000\034\003\ufff6\015\ufff6\020\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\034\ufff6\043\ufff6\051\ufff6\052\ufff6" +
    "\056\ufff6\057\ufff6\060\ufff6\001\002\000\034\003\ufff7\015" +
    "\ufff7\020\ufff7\027\ufff7\030\ufff7\031\ufff7\034\ufff7\043\ufff7" +
    "\051\ufff7\052\ufff7\056\ufff7\057\ufff7\060\ufff7\001\002\000" +
    "\010\012\252\036\246\052\247\001\002\000\004\013\325" +
    "\001\002\000\004\014\326\001\002\000\030\003\045\015" +
    "\uffd1\027\052\030\041\031\035\034\053\043\055\052\036" +
    "\056\056\057\042\060\047\001\002\000\004\015\330\001" +
    "\002\000\036\003\uff8d\015\uff8d\020\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\033\332\034\uff8d\043\uff8d\051\uff8d\052\uff8d\056" +
    "\uff8d\057\uff8d\060\uff8d\001\002\000\034\003\uff8c\015\uff8c" +
    "\020\uff8c\027\uff8c\030\uff8c\031\uff8c\034\uff8c\043\uff8c\051" +
    "\uff8c\052\uff8c\056\uff8c\057\uff8c\060\uff8c\001\002\000\006" +
    "\014\335\031\035\001\002\000\034\003\uff8b\015\uff8b\020" +
    "\uff8b\027\uff8b\030\uff8b\031\uff8b\034\uff8b\043\uff8b\051\uff8b" +
    "\052\uff8b\056\uff8b\057\uff8b\060\uff8b\001\002\000\034\003" +
    "\uff89\015\uff89\020\uff89\027\uff89\030\uff89\031\uff89\034\uff89" +
    "\043\uff89\051\uff89\052\uff89\056\uff89\057\uff89\060\uff89\001" +
    "\002\000\030\003\045\015\uffd1\027\052\030\041\031\035" +
    "\034\053\043\055\052\036\056\056\057\042\060\047\001" +
    "\002\000\004\015\337\001\002\000\034\003\uff8a\015\uff8a" +
    "\020\uff8a\027\uff8a\030\uff8a\031\uff8a\034\uff8a\043\uff8a\051" +
    "\uff8a\052\uff8a\056\uff8a\057\uff8a\060\uff8a\001\002\000\014" +
    "\004\101\005\075\006\076\007\100\022\347\001\002\000" +
    "\006\003\341\040\340\001\002\000\004\020\uffd6\001\002" +
    "\000\010\003\341\020\uffd4\040\340\001\002\000\004\020" +
    "\uffd5\001\002\000\010\003\uffdd\020\uffdd\040\uffdd\001\002" +
    "\000\004\052\371\001\002\000\004\052\350\001\002\000" +
    "\004\012\351\001\002\000\016\003\356\004\101\005\075" +
    "\006\076\007\100\013\353\001\002\000\006\013\uffba\021" +
    "\367\001\002\000\004\017\364\001\002\000\004\013\360" +
    "\001\002\000\004\052\357\001\002\000\004\013\uffb9\001" +
    "\002\000\006\013\uffb8\021\uffb8\001\002\000\004\017\361" +
    "\001\002\000\030\003\045\020\uffd1\027\052\030\041\031" +
    "\035\034\053\043\055\052\036\056\056\057\042\060\047" +
    "\001\002\000\004\020\363\001\002\000\010\003\uffdf\020" +
    "\uffdf\040\uffdf\001\002\000\030\003\045\020\uffd1\027\052" +
    "\030\041\031\035\034\053\043\055\052\036\056\056\057" +
    "\042\060\047\001\002\000\004\020\366\001\002\000\010" +
    "\003\uffde\020\uffde\040\uffde\001\002\000\014\003\356\004" +
    "\101\005\075\006\076\007\100\001\002\000\004\013\uffbb" +
    "\001\002\000\004\012\372\001\002\000\016\003\356\004" +
    "\101\005\075\006\076\007\100\013\373\001\002\000\004" +
    "\017\u0120\001\002\000\004\013\375\001\002\000\004\017" +
    "\376\001\002\000\032\003\u010b\020\uffce\027\052\030\u0108" +
    "\031\035\034\053\043\055\051\u0100\052\036\056\056\057" +
    "\042\060\u010d\001\002\000\032\003\u010b\020\uffce\027\052" +
    "\030\u0108\031\035\034\053\043\055\051\u0100\052\036\056" +
    "\056\057\042\060\u010d\001\002\000\004\012\u0119\001\002" +
    "\000\032\003\uffc2\020\uffc2\027\uffc2\030\uffc2\031\uffc2\034" +
    "\uffc2\043\uffc2\051\uffc2\052\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\001\002\000\032\003\uffc8\020\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\034\uffc8\043\uffc8\051\uffc8\052\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\001\002\000\032\003\uffc0\020\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\034\uffc0\043\uffc0\051\uffc0\052\uffc0\056\uffc0" +
    "\057\uffc0\060\uffc0\001\002\000\032\003\uffc1\020\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\034\uffc1\043\uffc1\051\uffc1\052\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\001\002\000\032\003\uffc3\020" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\034\uffc3\043\uffc3\051\uffc3" +
    "\052\uffc3\056\uffc3\057\uffc3\060\uffc3\001\002\000\004\020" +
    "\u0118\001\002\000\032\003\uffc6\020\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\034\uffc6\043\uffc6\051\uffc6\052\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\001\002\000\010\012\252\036\246\052\247" +
    "\001\002\000\032\003\uffc7\020\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\034\uffc7\043\uffc7\051\uffc7\052\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\001\002\000\032\003\uffc4\020\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\034\uffc4\043\uffc4\051\uffc4\052\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\001\002\000\034\003\u010b\011\uffa2\020" +
    "\uffce\027\052\030\u0108\031\035\034\053\043\055\051\u0100" +
    "\052\036\056\056\057\042\060\u010d\001\002\000\032\003" +
    "\uffc9\020\uffc9\027\uffc9\030\uffc9\031\uffc9\034\uffc9\043\uffc9" +
    "\051\uffc9\052\uffc9\056\uffc9\057\uffc9\060\uffc9\001\002\000" +
    "\004\012\242\001\002\000\004\011\u0111\001\002\000\032" +
    "\003\uffcb\020\uffcb\027\uffcb\030\uffcb\031\uffcb\034\uffcb\043" +
    "\uffcb\051\uffcb\052\uffcb\056\uffcb\057\uffcb\060\uffcb\001\002" +
    "\000\032\003\uffca\020\uffca\027\uffca\030\uffca\031\uffca\034" +
    "\uffca\043\uffca\051\uffca\052\uffca\056\uffca\057\uffca\060\uffca" +
    "\001\002\000\032\003\uffc5\020\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\034\uffc5\043\uffc5\051\uffc5\052\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\001\002\000\004\020\uffcf\001\002\000\004\042" +
    "\u0114\001\002\000\004\014\u0115\001\002\000\030\003\045" +
    "\015\uffd1\027\052\030\041\031\035\034\053\043\055\052" +
    "\036\056\056\057\042\060\047\001\002\000\004\015\u0117" +
    "\001\002\000\032\003\uffcc\020\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\034\uffcc\043\uffcc\051\uffcc\052\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\001\002\000\010\003\uffe1\020\uffe1\040\uffe1\001" +
    "\002\000\016\003\116\010\070\026\066\036\064\037\065" +
    "\052\u011c\001\002\000\004\013\uffbd\001\002\000\004\013" +
    "\uffbe\001\002\000\006\012\127\013\uffbc\001\002\000\004" +
    "\013\u011e\001\002\000\032\003\uffbf\020\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\034\uffbf\043\uffbf\051\uffbf\052\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\001\002\000\004\020\uffd0\001\002\000" +
    "\032\003\u010b\020\uffce\027\052\030\u0108\031\035\034\053" +
    "\043\055\051\u0100\052\036\056\056\057\042\060\u010d\001" +
    "\002\000\004\020\u0122\001\002\000\010\003\uffe0\020\uffe0" +
    "\040\uffe0\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\004\022\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\012\006\010" +
    "\007\013\036\011\037\014\040\015\001\001\000\004\030" +
    "\101\001\001\000\004\004\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\016\007\013\036\011\037" +
    "\014\040\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\341\050" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\050\023\043\031\036\036\053\037\056\040\045\041\030" +
    "\042\042\043\031\045\057\047\037\056\033\064\027\065" +
    "\032\071\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\301\017\247\021\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\002\050\023\043\036\053\037\056\040\045\041\030\042" +
    "\042\043\031\045\271\047\037\056\033\064\027\065\032" +
    "\071\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\050\023\043" +
    "\031\060\036\053\037\056\040\045\041\030\042\042\043" +
    "\031\045\057\047\037\056\033\064\027\065\032\071\047" +
    "\001\001\000\002\001\001\000\004\027\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\117\012\112\014\116\071\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\141\001\001\000\010\010\137\012\112\014\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\125\001\001\000\002\001\001\000\006\034\130" +
    "\035\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\135\035\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\143\014\116\001\001\000\004\011\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\160\001\001\000\012\027\163\066" +
    "\165\067\166\070\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\171\001\001\000\002\001\001\000\012\027" +
    "\163\066\165\067\173\070\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\050\023\043\031\207" +
    "\036\053\037\056\040\045\041\030\042\042\043\031\045" +
    "\057\047\037\056\033\064\027\065\032\071\047\001\001" +
    "\000\002\001\001\000\004\057\211\001\001\000\002\001" +
    "\001\000\040\002\050\023\043\031\213\036\053\037\056" +
    "\040\045\041\030\042\042\043\031\045\057\047\037\056" +
    "\033\064\027\065\032\071\047\001\001\000\002\001\001" +
    "\000\004\057\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\050\023\043\031\220\036\053\037\056" +
    "\040\045\041\030\042\042\043\031\045\057\047\037\056" +
    "\033\064\027\065\032\071\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\050\023\043\031\235" +
    "\036\053\037\056\040\045\041\030\042\042\043\031\045" +
    "\057\047\037\056\033\064\027\065\032\071\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\250\017\247\021\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\266\001\001" +
    "\000\002\001\001\000\010\015\262\017\247\021\252\001" +
    "\001\000\004\020\255\001\001\000\004\021\260\001\001" +
    "\000\004\021\256\001\001\000\002\001\001\000\004\020" +
    "\257\001\001\000\002\001\001\000\004\020\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\267\021\252\001\001\000\002" +
    "\001\001\000\004\016\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\002\050\023\043\031\304\036\053\037" +
    "\056\040\045\041\030\042\042\043\031\045\057\047\037" +
    "\056\033\064\027\065\032\071\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\314" +
    "\012\112\014\116\071\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\323" +
    "\017\247\021\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\050\023\043\031\326\036\053\037\056" +
    "\040\045\041\030\042\042\043\031\045\057\047\037\056" +
    "\033\064\027\065\032\071\047\001\001\000\002\001\001" +
    "\000\006\024\330\025\332\001\001\000\002\001\001\000" +
    "\004\023\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\050\023\043\031\335\036\053\037\056\040" +
    "\045\041\030\042\042\043\031\045\057\047\037\056\033" +
    "\064\027\065\032\071\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\345\001\001\000\004\050\344" +
    "\001\001\000\002\001\001\000\006\005\343\050\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\354\032" +
    "\353\033\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\050\023\043" +
    "\031\361\036\053\037\056\040\045\041\030\042\042\043" +
    "\031\045\057\047\037\056\033\064\027\065\032\071\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\050\023\043\031\364\036\053\037\056\040\045\041\030" +
    "\042\042\043\031\045\057\047\037\056\033\064\027\065" +
    "\032\071\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\354\032\367\033\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\354\032\373\033\351" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\023\u0109\036\u010e\037\u010f\040\u010b\041\u0101" +
    "\042\u0108\043\u0102\047\u0106\056\u0104\060\u0105\061\376\064" +
    "\u0100\065\u0103\071\u010d\001\001\000\036\023\u0109\036\u010e" +
    "\037\u010f\040\u010b\041\u0101\042\u0108\043\u0102\047\u0106\056" +
    "\u0104\060\u011e\061\376\064\u0100\065\u0103\071\u010d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\u0112\017\247\021" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\023\u0109\036\u010e\037\u010f\040\u010b\041\u0101\042\u0108\043" +
    "\u0102\047\u0106\056\u0104\060\u0111\061\376\064\u0100\065\u0103" +
    "\071\u010d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\050\023\043\031\u0115\036\053\037\056" +
    "\040\045\041\030\042\042\043\031\045\057\047\037\056" +
    "\033\064\027\065\032\071\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\u011a\062" +
    "\u011c\071\u0119\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\023\u0109\036\u010e\037\u010f\040\u010b" +
    "\041\u0101\042\u0108\043\u0102\047\u0106\056\u0104\060\u0120\061" +
    "\376\064\u0100\065\u0103\071\u010d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo arbol;
    public static int token=0;
    public static int parNum=0;
    
    public static int SintacticError =0;

    public String tokenes_id(int id){
        switch(id){
            case 0: return "EOF";
            case 1: return "error";
            case 2: return "VERDAD";
            case 3: return "NUMERITO";
            case 4: return "LETRA";
            case 5: return "WORD";
            case 6: return "PUNTOC";
            case 7: return "PARENTESISA";
            case 8: return "PARENTESISC";
            case 9: return "ABRIRC";
            case 10: return "CERRARC";
            case 11: return "ASSIGNMENT";
            case 12: return "BRACKETA";
            case 13: return "BRACKETC";
            case 14: return "COMMA";
            case 15: return "OPER";
            case 16: return "OPEA_SUM";
            case 17: return "OPEA_MULT";
            case 18: return "BOOL";
            case 19: return "FOR";
            case 20: return "WLE";
            case 21: return "IF";
            case 22: return "EIF";
            case 23: return "ELSE";
            case 24: return "BLOCK";
            case 25: return "END";
            case 26: return "NUM";
            case 27: return "LETTER";
            case 28: return "FUNC";
            case 29: return "START";
            case 30: return "FLECHA";
            case 31: return "VAR";
            case 32: return "NOT";
            case 33: return "IN";
            case 34: return "PUNTO";
            case 35: return "CASE";
            case 36: return "DEFAULT";
            case 37: return "REPLY";
            case 38: return "ID";
            case 39: return "ARRAY";
            case 40: return "NEW";
            case 41: return "THROW";
            case 42: return "THROWDOWN";
            case 43: return "CATCH";
            case 44: return "CADENA";
            default: return "Nothing";
        }
    }

         /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Columna " + (s.left) +
        " linear "+s.right+ ". No se esperaba este componente: " +s.value+".");
        
        SintacticError++;

        List expected =expected_token_ids();
        if(expected.size()!=0){
            int id;
            System.out.print("TOKEN ESPERADO..");
            for(int i=0;i<expected.size();i++){
                id = (int) expected.get(i);
                    if (i == expected.size() - 1) {
                        System.out.println(tokenes_id(id));
                    } else {
                        System.out.println(tokenes_id(id) + " | ");
                    }
            }
        }
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la columna " + 
        (s.left)+ " linear "+s.right+". Componente " + s.value + 
        " no reconocido.");
        System.out.println("Sintaxis mal escrito,irrecuperable"); 
    }  
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= START FLECHA BRACKETA body_start BRACKETC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo start = new Nodo("Start",token);
    parser.token ++;

    start.addHijo((Nodo)b);
 
    parser.arbol = start;
    RESULT = start;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declara_simple ::= VAR type ID PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        // Declaro el nodo declaración de variables
        Nodo decl = new Nodo("declaracion de variable",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(ide.toString(),parser.token);
        decl.addHijo(id);
        parser.token++;
        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_simple",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declara_assig ::= VAR type ID ASSIGNMENT BOOL PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo decl = new Nodo("declaracion y asignacion",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        Nodo value =new Nodo("valor",parser.token);
        parser.token++;

        Nodo tipo=new Nodo("bool",parser.token);
        parser.token++;
        Nodo valor = new Nodo(""+b,parser.token);
        parser.token++;
        tipo.addHijo(valor);

        value.addHijo(tipo);
        decl.addHijo(value);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_assig",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declara_assig ::= VAR type ID ASSIGNMENT LETTER PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo decl = new Nodo("declaracion y asignacion",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        Nodo value=new Nodo("valor",parser.token);
        parser.token++;

        Nodo tipo=new Nodo("letter",parser.token);
        parser.token++;
        Nodo valor = new Nodo(""+l,parser.token);
        parser.token++;
        tipo.addHijo(valor);

        value.addHijo(tipo);
        decl.addHijo(value);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_assig",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declara_assig ::= VAR type ID ASSIGNMENT CADENA PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo decl = new Nodo("declaracion y asignacion",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        Nodo value=new Nodo("valor",parser.token);
        parser.token++;

        Nodo tipo=new Nodo("string",parser.token);
        parser.token++;
        Nodo valor = new Nodo(c.toString(),parser.token);
        parser.token++;
        tipo.addHijo(valor);

        value.addHijo(tipo);
        decl.addHijo(value);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_assig",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declara_assig ::= VAR type ID ASSIGNMENT llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo decl = new Nodo("declaracion y asignacion",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        decl.addHijo((Nodo)f);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_assig",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declara_assigExpression ::= VAR type ID ASSIGNMENT nodeExpression PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo decl = new Nodo("declaracion y asignacion expresión",  parser.token);
        parser.token++;
        // Asigno var
        Nodo variable=new Nodo(v.toString(),parser.token);
        parser.token++;
        decl.addHijo(variable);
        parser.token++;
        // Asigno el tipo
        decl.addHijo((Nodo)t);
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        
        // Asigno el valor
        // Aquí valido si solo se le asigna un id o un número
        Nodo temp = (Nodo)n;
        if (temp.getHijos().size() == 3){
            String id1, id2, num;
            num = temp.getHijo(0).getValor();
            id1 = temp.getHijo(1).getValor();
            id2 = temp.getHijo(2).getValor();
            if(id1.equals("#") && id2.equals("#") && num.equals("num") ){
                Nodo newNodo = new Nodo("valor",temp.getID());
                newNodo.addHijo(temp.getHijo(0));
                decl.addHijo(newNodo);
                decl.setValor("declaracion y asignacion");
            }else if (id1.equals("#") && id2.equals("#") && num.equals("id")){
                decl.addHijo(temp.getHijo(0));
                decl.setValor("declaracion y asignacion");
            }else{
                decl.addHijo((Nodo)n);
            }
        }else{
            decl.addHijo((Nodo)n);
        }

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_assigExpression",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assig ::= ID ASSIGNMENT BOOL PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo decl = new Nodo("asignacion",  parser.token);
        parser.token++;
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;

        // Booleano
        Nodo tipo =new Nodo("bool",parser.token);
        parser.token++;
        Nodo valor = new Nodo(""+b,parser.token);
        parser.token++;
        tipo.addHijo(valor);

        // Asigno el valor
        Nodo val=new Nodo("valor",parser.token);
        parser.token++;
        val.addHijo(tipo);
        decl.addHijo(val);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assig",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assig ::= ID ASSIGNMENT LETTER PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo decl = new Nodo("asignacion",  parser.token);
        parser.token++;
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;

        // letter
        Nodo tipo =new Nodo("letter",parser.token);
        parser.token++;
        Nodo valor = new Nodo(""+b,parser.token);
        parser.token++;
        tipo.addHijo(valor);

        // Asigno el valor
        Nodo val=new Nodo("valor",parser.token);
        parser.token++;
        val.addHijo(tipo);
        decl.addHijo(val);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assig",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assig ::= ID ASSIGNMENT CADENA PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo decl = new Nodo("asignacion",  parser.token);
        parser.token++;
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;

        // string
        Nodo tipo =new Nodo("string",parser.token);
        parser.token++;
        Nodo valor = new Nodo(b.toString(),parser.token);
        parser.token++;
        tipo.addHijo(valor);

        // Asigno el valor
        Nodo val=new Nodo("valor",parser.token);
        parser.token++;
        val.addHijo(tipo);
        decl.addHijo(val);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assig",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assig ::= ID ASSIGNMENT llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  
    Nodo decl = new Nodo("asignacion",  parser.token);
        parser.token++;
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(ide.toString(),parser.token));
        decl.addHijo(id);
        parser.token++;
        // Asigno el valor
        decl.addHijo((Nodo)f);

        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assig",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // assigExpression ::= ID ASSIGNMENT nodeExpression PUNTOC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo decl = new Nodo("asignación expresión",  parser.token);
        parser.token++;
        // Asigno el id
        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(new Nodo(c.toString(),parser.token));
        parser.token++;
        decl.addHijo(id);
        // Asigno el valor
        // Aquí valido si solo se le asigna un id o un número
        Nodo temp = (Nodo)n;
        if (temp.getHijos().size() == 3){
            String id1, id2, num;
            num = temp.getHijo(0).getValor();
            id1 = temp.getHijo(1).getValor();
            id2 = temp.getHijo(2).getValor();
            if(id1.equals("#") && id2.equals("#") && num.equals("num") ){
                Nodo newNodo = new Nodo("valor",temp.getID());
                newNodo.addHijo(temp.getHijo(0));
                decl.addHijo(newNodo);
                decl.setValor("asignacion");
            }else if (id1.equals("#") && id2.equals("#") && num.equals("id")){
                decl.addHijo(temp.getHijo(0));
                decl.setValor("asignacion");
            }else{
                decl.addHijo((Nodo)n);
            }
        }else{
            decl.addHijo((Nodo)n);
        }


        RESULT = decl;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assigExpression",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // booleanExpression ::= t_booleanExpression p_booleanExpression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo expr = new Nodo("expresión", parser.token++);
    parser.token++;
    expr.addHijitos( ((Nodo)t).getHijos() );
    expr.addHijo((Nodo)p);
    RESULT = expr;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("booleanExpression",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // p_booleanExpression ::= OPEA_SUM t_booleanExpression p_booleanExpression 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo expr = new Nodo(o.toString(), parser.token++);
    parser.token++;
    expr.addHijitos( ((Nodo)t).getHijos() );
    expr.addHijo((Nodo)p);
    RESULT = expr;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("p_booleanExpression",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // p_booleanExpression ::= 
            {
              Object RESULT =null;
		
    Nodo node =  new Nodo("#", parser.token++);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("p_booleanExpression",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // t_booleanExpression ::= f_booleanExpression d_booleanExpression 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo expr = new Nodo("T", parser.token++);
    parser.token++;
    expr.addHijo((Nodo)f);
    expr.addHijo((Nodo)d);
    RESULT = expr;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("t_booleanExpression",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // d_booleanExpression ::= OPEA_MULT f_booleanExpression d_booleanExpression 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo expr = new Nodo(o.toString(), parser.token++);
    parser.token++;
    expr.addHijo((Nodo)f);
    expr.addHijo((Nodo)d);
    RESULT = expr;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("d_booleanExpression",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // d_booleanExpression ::= OPER f_booleanExpression d_booleanExpression 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo expr = new Nodo(o.toString(), parser.token++);
    parser.token++;
    expr.addHijo((Nodo)f);
    expr.addHijo((Nodo)d);
    RESULT = expr;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("d_booleanExpression",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // d_booleanExpression ::= 
            {
              Object RESULT =null;
		
    Nodo node =  new Nodo("#", parser.token++);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("d_booleanExpression",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // f_booleanExpression ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("num",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("f_booleanExpression",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // f_booleanExpression ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("id",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("f_booleanExpression",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // f_booleanExpression ::= PARENTESISA booleanExpression PARENTESISC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    RESULT = (Nodo)f;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("f_booleanExpression",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nodeExpression ::= t_expression p_expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo expr = new Nodo("expresión", parser.token++);
    parser.token++;
    expr.addHijitos( ((Nodo)t).getHijos() );
    expr.addHijo((Nodo)p);
    RESULT = expr;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("nodeExpression",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // p_expression ::= OPEA_SUM t_expression p_expression 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo expr = new Nodo(o.toString(), parser.token++);
    parser.token++;
    expr.addHijitos( ((Nodo)t).getHijos() );
    expr.addHijo((Nodo)p);
    RESULT = expr;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("p_expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // p_expression ::= 
            {
              Object RESULT =null;
		
    Nodo node =  new Nodo("#", parser.token++);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("p_expression",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // t_expression ::= f_expression d_expression 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo expr = new Nodo("T", parser.token++);
    parser.token++;
    expr.addHijo((Nodo)f);
    expr.addHijo((Nodo)d);
    RESULT = expr;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("t_expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // d_expression ::= OPEA_MULT f_expression d_expression 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo expr = new Nodo(o.toString(), parser.token++);
    parser.token++;
    expr.addHijo((Nodo)f);
    expr.addHijo((Nodo)d);
    RESULT = expr;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("d_expression",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // d_expression ::= 
            {
              Object RESULT =null;
		
    Nodo node =  new Nodo("#", parser.token++);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("d_expression",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // f_expression ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("num",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("f_expression",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // f_expression ::= ID 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("id",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+n,parser.token);
    parser.token++;
    node.addHijo(valor);
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("f_expression",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // f_expression ::= PARENTESISA nodeExpression PARENTESISC 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    RESULT = (Nodo)f;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("f_expression",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funciones ::= FUNC type ID PARENTESISA parametrosf PARENTESISC BRACKETA bodyf BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("declaración de funcion",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("función",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo((Nodo)t);

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;

    Nodo parametros = new Nodo("parametros",parser.token);
    parser.token++;
    parametros.addHijitos( ((Nodo)p).getHijos() );

    node.addHijo(parametros);
    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funciones ::= FUNC type ID PARENTESISA PARENTESISC BRACKETA bodyf BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("declaración de funcion",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("funcion",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo((Nodo)t);

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;
    
    Nodo vacio = new Nodo("Vacio",parser.token);
    parser.token++;

    Nodo parametros = new Nodo("parametros",parser.token);
    parser.token++;
    parametros.addHijo(vacio);
    
    node.addHijo(parametros);

    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funciones ::= FUNC VOID ID PARENTESISA parametrosf PARENTESISC BRACKETA body BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("declaración de funcion",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("función",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo(t.toString(),parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;

    Nodo parametros = new Nodo("parametros",parser.token);
    parser.token++;
    parametros.addHijitos( ((Nodo)p).getHijos() );

    node.addHijo(parametros);
    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funciones ::= FUNC VOID ID PARENTESISA PARENTESISC BRACKETA body BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("declaración de funcion",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("funcion",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo(t.toString(),parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;
    
    Nodo vacio = new Nodo("Vacio",parser.token);
    parser.token++;

    Nodo parametros = new Nodo("parametros",parser.token);
    parser.token++;
    parametros.addHijo(vacio);
    
    node.addHijo(parametros);

    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funciones ::= error funciones 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo fun = new Nodo("funcion",parser.token);
    parser.token++;

    fun.addHijo("Error",parser.token);

    if(f!=null){
        fun.addHijitos(((Nodo)f).getHijos());
    }

     RESULT = fun;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CicloFor ::= FOR PARENTESISA ID IN NUM PUNTO PUNTO PUNTO NUM PARENTESISC FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo ciclo = new Nodo("declaración ciclo for",parser.token);
        parser.token++;

        // Expresión
        Nodo expr = new Nodo("expresión for",parser.token);
        parser.token++;

        Nodo id=new Nodo("id",parser.token);
        parser.token++;
        id.addHijo(ide.toString(),parser.token);
        parser.token++;

        Nodo num1=new Nodo("num",parser.token);
        parser.token++;
        num1.addHijo(n.toString(),parser.token);
        parser.token++;

        Nodo num2=new Nodo("num",parser.token);
        parser.token++;
        num2.addHijo(n1.toString(),parser.token);
        parser.token++;

        expr.addHijo(id);
        expr.addHijo(num1);
        expr.addHijo(num2);
        ciclo.addHijo(expr);
        ciclo.addHijo((Nodo)b);

        RESULT= ciclo;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CicloFor",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // global_props ::= declara_simple 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)d;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("global_props",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // global_props ::= declara_assig 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("global_props",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // global_props ::= declara_assigExpression 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("global_props",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // prop_list ::= global_props prop_list 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  
    Nodo node = new Nodo("lista de proposiciones", parser.token);
    parser.token++;
    // Añadir la proposición
    node.addHijo((Nodo)d);
    if(pl!=null) node.addHijitos( ((Nodo)pl).getHijos() );                      
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("prop_list",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // prop_list ::= 
            {
              Object RESULT =null;
		/*Vacío*/
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("prop_list",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // body_start ::= prop_list main func_list 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo body=new Nodo("body",parser.token);
    parser.token++;

    if(pl!=null){
        body.addHijitos(  ((Nodo)pl).getHijos() );
    }

    if(f!=null){
        body.addHijitos(  ((Nodo)f).getHijos() );
    }

    body.addHijo( (Nodo)m );

    RESULT= body;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body_start",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // func_list ::= funciones func_list 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		      
    // CURRENT NODE
    Nodo node = new Nodo("FUNCTION_LIST", parser.token);
    parser.token++;

    // FUNCTION
    node.addHijo((Nodo)f);

    if(fl!=null) node.addHijitos( ((Nodo)fl).getHijos() );                      
  
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // func_list ::= 
            {
              Object RESULT =null;
		/*vacío*/
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("func_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // main ::= FUNC VOID MAIN PARENTESISA PARENTESISC BRACKETA body BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("declaración de funcion",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("función",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo(t.toString(),parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;

    Nodo vacio = new Nodo("Vacio",parser.token);
    parser.token++;

    Nodo parametros = new Nodo("parametros",parser.token);
    parser.token++;
    parametros.addHijo(vacio);
    
    node.addHijo(parametros);

    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("main",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // body ::= proposition body 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo bodyn = new Nodo("body",  parser.token);
        parser.token++;
        bodyn.addHijo((Nodo) p);
        
        if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }

        RESULT = bodyn;
                

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // body ::= 
            {
              Object RESULT =null;
		
    Nodo node=new Nodo("Vacio",parser.token);
    parser.token++;
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bodyf ::= propositionf bodyf 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo bodyn = new Nodo("body",  parser.token);
        parser.token++;

        bodyn.addHijo((Nodo) p);
        
        if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }

        RESULT = bodyn;
                

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyf",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bodyf ::= error bodyf 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo bodyn = new Nodo("body",  parser.token);
    parser.token++;
    bodyn.addHijo("Error",parser.token);
    parser.token++;
    if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }
    RESULT=bodyn;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyf",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bodyf ::= 
            {
              Object RESULT =null;
		
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyf",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // test ::= CATCH ASSIGNMENT booleanExpression PUNTOC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("awita",parser.token++);
    parser.token++;

    node.addHijo((Nodo)b);
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("test",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // propositionf ::= WLE booleanExpression FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("declaración ciclo while",parser.token);
    parser.token++;

    Nodo whil=new Nodo("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)b);

    RESULT= node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // propositionf ::= declara_simple 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)d;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // propositionf ::= declara_assig 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // propositionf ::= declara_assigExpression 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // propositionf ::= assig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)a;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // propositionf ::= assigExpression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)a;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // propositionf ::= CicloFor 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)cf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // propositionf ::= llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    RESULT=lf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // propositionf ::= ifState 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = ife;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // propositionf ::= block_switch 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=b;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // propositionf ::= print 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=p;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // propositionf ::= catch 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=c;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // propositionf ::= declara_array 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // propositionf ::= REPLY PARENTESISA devolverFunc PARENTESISC 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("reply",parser.token);
    parser.token++;
    node.addHijo((Nodo)df);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // devolverFunc ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=v;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("devolverFunc",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // devolverFunc ::= llamadaFunc 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=lf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("devolverFunc",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // devolverFunc ::= ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo ID = new Nodo("id",parser.token);
    parser.token++;

    ID.addHijo(ide.toString(),parser.token);
    
    parser.token++;

    RESULT = ID;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("devolverFunc",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametrosf ::= parametrof COMMA parametrosf 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametros",parser.token);
    parser.token++;
    node.addHijo((Nodo)p);
    node.addHijitos(((Nodo)ps).getHijos());
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametrosf",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametrosf ::= parametrof 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametros",parser.token);
    parser.token++;
    node.addHijo((Nodo)p);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametrosf",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametrosf ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("error parametro",parser.token);
    parser.token++;
    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametrosf",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametrof ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo param = new Nodo("Parametro",parser.token);
    parser.token++;
    param.addHijo((Nodo)t);
    Nodo nom = new Nodo(""+id,parser.token);
    parser.token++;
    param.addHijo(nom);
    RESULT = param;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametrof",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros ::= parametro COMMA parametros 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametros",parser.token);
    parser.token++;
    node.addHijo((Nodo)p);
    node.addHijitos(((Nodo)ps).getHijos());
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametros",parser.token);
    parser.token++;
    node.addHijo((Nodo)p);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("error parametro",parser.token);
    parser.token++;
    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametro ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo param = new Nodo("Parametro",parser.token);
    parser.token++;
    Nodo nom =new Nodo(""+id,parser.token);
    parser.token++;
    param.addHijo(nom);
    RESULT=param;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // proposition ::= WLE booleanExpression FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("declaración ciclo while",parser.token);
    parser.token++;

    Nodo whil=new Nodo("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)b);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // proposition ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)t;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // proposition ::= declara_simple 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)d;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // proposition ::= declara_assig 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // proposition ::= declara_assigExpression 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // proposition ::= assig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)a;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // proposition ::= assigExpression 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)a;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // proposition ::= CicloFor 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = (Nodo)cf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // proposition ::= llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    RESULT=lf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // proposition ::= ifState 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = ife;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // proposition ::= block_switch 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=b;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // proposition ::= print 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=p;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // proposition ::= catch 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=c;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // proposition ::= declara_array 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // proposition ::= error proposition 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("Error ",parser.token);
    parser.token++;

    if(p!=null){
        node.addHijitos(((Nodo)p).getHijos());
    }

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // llamadaFunc ::= ID PARENTESISA parametros PARENTESISC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("llamada a funcion",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    node.addHijo((Nodo)p);

    RESULT = node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamadaFunc",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // llamadaFunc ::= ID PARENTESISA PARENTESISC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("llamada a funcion",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo p=new Nodo("Vacio",parser.token);
    parser.token++;

    node.addHijo((Nodo)p);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamadaFunc",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // llamadaFunc ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("error llamada a funcion",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamadaFunc",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // print ::= THROW PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("throw",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // print ::= THROW PARENTESISA valores PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("throw",parser.token);
    parser.token++;

    node.addHijo((Nodo)v);
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // print ::= THROWDOWN PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("throwdown",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // print ::= THROWDOWN PARENTESISA valores PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("throwdown",parser.token);
    parser.token++;

    node.addHijo((Nodo)v);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // catch ::= CATCH PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("catch",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("catch",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type ::= VERDAD 
            {
              Object RESULT =null;
		
    
    Nodo node = new Nodo("booleano",  parser.token);
    parser.token++;
    RESULT = node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type ::= NUMERITO 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("entero",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type ::= LETRA 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("caracter",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type ::= WORD 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("string",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA NUM PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		

    Nodo node = new Nodo("declaración array",parser.token);
    parser.token++;

    Nodo array=new Nodo("array()",parser.token);
    parser.token++;
    node.addHijo(array); 

    Nodo id=new Nodo("id",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    Nodo num2=new Nodo("indice",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_array",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA NUM PARENTESISC bracket_valores PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object bv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("declaración array",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo num2=new Nodo("indice",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);

    
 
    node.addHijo((Nodo)bv);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_array",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // bracket_valores ::= BRACKETA list_valores BRACKETC 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    RESULT=lv;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bracket_valores",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // list_valores ::= arrayData COMMA list_valores 
            {
              Object RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);

    if(lv!=null){
        node.addHijitos(((Nodo)lv).getHijos());
    }
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_valores",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // list_valores ::= arrayData 
            {
              Object RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_valores",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // list_valores ::= bracket_valores COMMA bracket_valores 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("dos dimensiones",parser.token);
    parser.token++;

    node.addHijo((Nodo)b);
    node.addHijo((Nodo)b1);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_valores",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arrayData ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=v;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arrayData",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valores ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("num",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+n,parser.token);
    parser.token++;

    node.addHijo(valor);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valores ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("bool",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+b,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valores ::= LETTER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("letter",parser.token);
    parser.token++;
    Nodo valor = new Nodo(""+l,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valores ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    String cadenita = c.toString().replace("\"","");
    Nodo node=new Nodo("string",parser.token);
    parser.token++;
    Nodo valor = new Nodo(cadenita,parser.token);
    parser.token++;
    
    node.addHijo(valor);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ifState ::= IF PARENTESISA booleanExpression PARENTESISC ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("declaración if",parser.token);
    parser.token++;
    Nodo ife= new Nodo("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Nodo)e);
    if (b!=null) node.addHijo((Nodo)b);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifState",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ifState ::= IF PARENTESISA booleanExpression PARENTESISC ABRIRC body CERRARC else_n 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("declaración if",parser.token);
    parser.token++;
    Nodo ife=new Nodo("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Nodo)e);
    if (b!=null) node.addHijo((Nodo)b);
    node.addHijo((Nodo)el);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifState",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ifState ::= IF PARENTESISA booleanExpression PARENTESISC ABRIRC body CERRARC elseif 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("declaración if",parser.token);
    parser.token++;
    Nodo ife=new Nodo("if",parser.token);
    parser.token++;
    node.addHijo(ife);
    node.addHijo((Nodo)e);
    if (b!=null) node.addHijo((Nodo)b);
    node.addHijo((Nodo)el);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifState",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // else_n ::= ELSE ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("else",parser.token);
    parser.token++;
    if (b!=null) node.addHijo((Nodo)b);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("else_n",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // elseif ::= ELSE ifState 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("else if",parser.token);
    parser.token++;
    node.addHijitos(((Nodo)i).getHijos());
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("elseif",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // block_switch ::= BLOCK PARENTESISA ID PARENTESISC FLECHA cases END 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("declaración bloque switch",parser.token);
    parser.token++;

    Nodo block=new Nodo("Block",parser.token);
    parser.token++;
    node.addHijo(block);
 
    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
   
    node.addHijo((Nodo)c);

    Nodo end=new Nodo("end",parser.token);
    parser.token++;
    node.addHijo(end);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("block_switch",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // cases ::= CASE ID ABRIRC body CERRARC cases 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    Nodo node=new Nodo("case body",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    
    Nodo id=new Nodo("id",parser.token);
    parser.token++;
    cas.addHijo(ide.toString(),parser.token);
    parser.token++;
 
    cas.addHijo((Nodo)b);
 
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }
    
    node.addHijo(cas);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // cases ::= CASE valores ABRIRC body CERRARC cases 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    node.addHijo(cas);

    node.addHijo((Nodo)v);
 
    node.addHijo((Nodo)b);
  
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }

    RESULT= node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // cases ::= DEFAULT ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;
 
    node.addHijo((Nodo)b);
 
    RESULT=node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cases ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("Erros-case",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expression_simple 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=es;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression_simple OPER expression 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node =new Nodo("expresión simple",parser.token);
    parser.token++;
    node.addHijo((Nodo)es);

    node.addHijo(op.toString(),parser.token);
    parser.token++;

    if(ex!=null){
        node.addHijitos(((Nodo)ex).getHijos());
    }
    
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("error expresión",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_simple ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		  
    RESULT=t;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression_simple",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_simple ::= signo termino 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=(Nodo)t;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression_simple",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_simple ::= expression_simple OPEA_SUM termino 
            {
              Object RESULT =null;
		int exsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("expresión simple",parser.token);
    parser.token++;

    if(exs!=null){
        node.addHijitos(((Nodo)exs).getHijos());
    }

    Nodo opea_sum=new Nodo("operador suma/resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;
    node.addHijo(opea_sum);

    node.addHijo((Nodo)t);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression_simple",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=f;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // termino ::= termino OPEA_MULT factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node =new Nodo("termino",parser.token);
    parser.token++;
    if(t!=null){
        node.addHijitos(((Nodo)t).getHijos());
    }
    Nodo opea_mult=new Nodo("operador multiplicacion/division",parser.token);
    parser.token++;

    opea_mult.addHijo(op.toString(),parser.token++);
    parser.token++;

    node.addHijo(opea_mult);

    node.addHijo((Nodo)f);

    RESULT=node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // factor ::= ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // factor ::= ID PARENTESISA list_expression PARENTESISC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
    

    node.addHijo((Nodo)list);
   
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // factor ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=v;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // factor ::= PARENTESISA expression PARENTESISC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;
    node.addHijo((Nodo)e);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo not=new Nodo("Not",parser.token);
    parser.token++;
    not.addHijo(n.toString(),parser.token);

    if(f!=null){
        node.addHijitos(((Nodo)f).getHijos());
    }

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // signo ::= OPEA_SUM 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node= new Nodo("Signo",parser.token);
    parser.token++;

    Nodo opea_sum=new Nodo("Operacion Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;

    node.addHijo(opea_sum);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // list_expression ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Lista de Expresiones",parser.token);
    parser.token++;
    node.addHijo((Nodo)e);

    RESULT=e;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_expression",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // list_expression ::= list_expression COMMA expression 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Lista de Expresiones",parser.token);
    parser.token++;

    if(list!=null){
        node.addHijitos(((Nodo)list).getHijos());
    }
    Nodo coma=new Nodo(",",parser.token);
    parser.token++;
    node.addHijo(coma);

    node.addHijo((Nodo)e);
    
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_expression",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
