
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\007\000\002\013" +
    "\006\000\002\020\013\000\002\020\004\000\002\017\020" +
    "\000\002\007\004\000\002\007\004\000\002\007\002\000" +
    "\002\030\004\000\002\030\004\000\002\030\002\000\002" +
    "\031\010\000\002\031\003\000\002\031\003\000\002\031" +
    "\004\000\002\031\003\000\002\031\006\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\006\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\042\003\000\002\042\005\000\002\010" +
    "\004\000\002\010\003\000\002\010\003\000\002\015\010" +
    "\000\002\015\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\006\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\004\000\002\041\006\000\002\041\003\000\002\034\007" +
    "\000\002\034\007\000\002\034\007\000\002\034\007\000" +
    "\002\035\011\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\011\003\000\002\011" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\016\003\000\002\012\013\000\002\012\014\000" +
    "\002\036\005\000\002\037\005\000\002\037\003\000\002" +
    "\037\005\000\002\040\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\003\012" +
    "\000\002\014\010\000\002\014\006\000\002\014\002\000" +
    "\002\026\011\000\002\027\010\000\002\027\010\000\002" +
    "\027\006\000\002\027\003\000\002\004\003\000\002\004" +
    "\005\000\002\004\003\000\002\021\003\000\002\021\004" +
    "\000\002\021\005\000\002\022\003\000\002\022\005\000" +
    "\002\024\003\000\002\024\006\000\002\024\003\000\002" +
    "\024\005\000\002\024\004\000\002\023\003\000\002\025" +
    "\003\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\037\005\001\002\000\004\002\351\001" +
    "\002\000\004\040\006\001\002\000\004\016\007\001\002" +
    "\000\032\003\025\017\ufff9\025\030\026\021\027\015\032" +
    "\032\036\022\041\033\051\016\054\034\055\023\056\026" +
    "\001\002\000\034\003\025\014\ufff9\017\ufff9\025\030\026" +
    "\021\027\015\032\032\036\022\041\033\051\016\054\034" +
    "\055\023\056\026\001\002\000\034\003\uffdb\014\uffdb\017" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\032\uffdb\036\uffdb\041\uffdb" +
    "\051\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002\000\034\003" +
    "\uffd9\014\uffd9\017\uffd9\025\uffd9\026\uffd9\027\uffd9\032\uffd9" +
    "\036\uffd9\041\uffd9\051\uffd9\054\uffd9\055\uffd9\056\uffd9\001" +
    "\002\000\034\003\uffda\014\uffda\017\uffda\025\uffda\026\uffda" +
    "\027\uffda\032\uffda\036\uffda\041\uffda\051\uffda\054\uffda\055" +
    "\uffda\056\uffda\001\002\000\034\003\uffdc\014\uffdc\017\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\032\uffdc\036\uffdc\041\uffdc\051" +
    "\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000\004\011\326" +
    "\001\002\000\006\011\275\015\323\001\002\000\004\017" +
    "\322\001\002\000\034\003\uffe0\014\uffe0\017\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\032\uffe0\036\uffe0\041\uffe0\051\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\001\002\000\024\003\243\011\240" +
    "\022\235\024\044\034\040\035\043\042\245\043\042\051" +
    "\242\001\002\000\012\004\056\005\052\006\053\007\057" +
    "\001\002\000\004\011\173\001\002\000\034\003\uffde\014" +
    "\uffde\017\uffde\025\uffde\026\uffde\027\uffde\032\uffde\036\uffde" +
    "\041\uffde\051\uffde\054\uffde\055\uffde\056\uffde\001\002\000" +
    "\032\003\025\010\uffd6\025\030\026\021\027\015\032\032" +
    "\036\022\041\033\051\016\054\034\055\023\056\026\001" +
    "\002\000\004\011\163\001\002\000\004\010\162\001\002" +
    "\000\004\011\145\001\002\000\034\003\uffe1\014\uffe1\017" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\032\uffe1\036\uffe1\041\uffe1" +
    "\051\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000\004\011" +
    "\117\001\002\000\014\004\056\005\052\006\053\007\057" +
    "\051\054\001\002\000\004\011\037\001\002\000\034\003" +
    "\025\014\ufff9\017\ufff9\025\030\026\021\027\015\032\032" +
    "\036\022\041\033\051\016\054\034\055\023\056\026\001" +
    "\002\000\006\014\ufffb\017\ufffb\001\002\000\014\024\044" +
    "\034\040\035\043\043\042\051\041\001\002\000\024\010" +
    "\uffbf\012\uffbf\013\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\040\uffbf\001\002\000\004\012\050\001\002\000" +
    "\024\010\uffbd\012\uffbd\013\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\040\uffbd\001\002\000\024\010\uffbc\012" +
    "\uffbc\013\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\040\uffbc\001\002\000\024\010\uffbe\012\uffbe\013\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\040\uffbe\001\002" +
    "\000\004\012\046\001\002\000\004\010\047\001\002\000" +
    "\036\003\uffd4\014\uffd4\017\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\032\uffd4\036\uffd4\041\uffd4\050\uffd4\051\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\001\002\000\004\010\051\001\002\000\036" +
    "\003\uffd5\014\uffd5\017\uffd5\025\uffd5\026\uffd5\027\uffd5\032" +
    "\uffd5\036\uffd5\041\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\001\002\000\004\051\uffcf\001\002\000\004\051" +
    "\uffce\001\002\000\004\015\074\001\002\000\004\051\060" +
    "\001\002\000\004\051\uffd0\001\002\000\004\051\uffcd\001" +
    "\002\000\010\003\064\010\065\015\062\001\002\000\036" +
    "\003\uffff\014\uffff\017\uffff\025\uffff\026\uffff\027\uffff\032" +
    "\uffff\036\uffff\041\uffff\050\uffff\051\uffff\054\uffff\055\uffff" +
    "\056\uffff\001\002\000\014\024\044\034\040\035\043\043" +
    "\042\051\070\001\002\000\036\003\uffcb\014\uffcb\017\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\032\uffcb\036\uffcb\041\uffcb\050" +
    "\uffcb\051\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002\000\036" +
    "\003\uffc7\014\uffc7\017\uffc7\025\uffc7\026\uffc7\027\uffc7\032" +
    "\uffc7\036\uffc7\041\uffc7\050\uffc7\051\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\001\002\000\036\003\uffcc\014\uffcc\017\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\032\uffcc\036\uffcc\041\uffcc\050\uffcc" +
    "\051\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002\000\004\010" +
    "\067\001\002\000\036\003\uffc8\014\uffc8\017\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\032\uffc8\036\uffc8\041\uffc8\050\uffc8\051" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\001\002\000\004\010\073" +
    "\001\002\000\004\010\072\001\002\000\036\003\uffca\014" +
    "\uffca\017\uffca\025\uffca\026\uffca\027\uffca\032\uffca\036\uffca" +
    "\041\uffca\050\uffca\051\uffca\054\uffca\055\uffca\056\uffca\001" +
    "\002\000\036\003\uffc9\014\uffc9\017\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\032\uffc9\036\uffc9\041\uffc9\050\uffc9\051\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\001\002\000\004\053\075\001\002" +
    "\000\004\052\076\001\002\000\004\011\077\001\002\000" +
    "\004\034\100\001\002\000\004\012\101\001\002\000\006" +
    "\010\104\016\102\001\002\000\014\016\102\024\044\034" +
    "\040\035\043\043\042\001\002\000\004\010\105\001\002" +
    "\000\036\003\uffc6\014\uffc6\017\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\032\uffc6\036\uffc6\041\uffc6\050\uffc6\051\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\001\002\000\036\003\uffc5\014\uffc5\017" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\032\uffc5\036\uffc5\041\uffc5" +
    "\050\uffc5\051\uffc5\054\uffc5\055\uffc5\056\uffc5\001\002\000" +
    "\006\017\uffc0\020\uffc0\001\002\000\006\017\uffc2\020\115" +
    "\001\002\000\004\020\113\001\002\000\004\017\112\001" +
    "\002\000\010\010\uffc4\017\uffc4\020\uffc4\001\002\000\004" +
    "\016\102\001\002\000\004\017\uffc1\001\002\000\014\016" +
    "\102\024\044\034\040\035\043\043\042\001\002\000\004" +
    "\017\uffc3\001\002\000\004\051\120\001\002\000\004\012" +
    "\121\001\002\000\004\040\122\001\002\000\010\003\124" +
    "\046\126\047\123\001\002\000\004\013\142\001\002\000" +
    "\004\033\uffb3\001\002\000\004\033\141\001\002\000\014" +
    "\024\044\034\040\035\043\043\042\051\127\001\002\000" +
    "\004\013\135\001\002\000\004\013\131\001\002\000\032" +
    "\003\025\014\ufff9\025\030\026\021\027\015\032\032\036" +
    "\022\041\033\051\016\054\034\055\023\056\026\001\002" +
    "\000\004\014\133\001\002\000\010\003\124\046\126\047" +
    "\123\001\002\000\004\033\uffb5\001\002\000\032\003\025" +
    "\014\ufff9\025\030\026\021\027\015\032\032\036\022\041" +
    "\033\051\016\054\034\055\023\056\026\001\002\000\004" +
    "\014\137\001\002\000\010\003\124\046\126\047\123\001" +
    "\002\000\004\033\uffb6\001\002\000\036\003\uffb7\014\uffb7" +
    "\017\uffb7\025\uffb7\026\uffb7\027\uffb7\032\uffb7\036\uffb7\041" +
    "\uffb7\050\uffb7\051\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002" +
    "\000\032\003\025\014\ufff9\025\030\026\021\027\015\032" +
    "\032\036\022\041\033\051\016\054\034\055\023\056\026" +
    "\001\002\000\004\014\144\001\002\000\004\033\uffb4\001" +
    "\002\000\004\051\146\001\002\000\004\044\147\001\002" +
    "\000\004\034\150\001\002\000\004\045\151\001\002\000" +
    "\004\045\152\001\002\000\004\045\153\001\002\000\004" +
    "\034\154\001\002\000\004\012\155\001\002\000\004\040" +
    "\156\001\002\000\004\013\157\001\002\000\032\003\025" +
    "\014\ufff9\025\030\026\021\027\015\032\032\036\022\041" +
    "\033\051\016\054\034\055\023\056\026\001\002\000\004" +
    "\014\161\001\002\000\036\003\ufffc\014\ufffc\017\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\032\ufffc\036\ufffc\041\ufffc\050\ufffc" +
    "\051\ufffc\054\ufffc\055\ufffc\056\ufffc\001\002\000\034\003" +
    "\uffdf\014\uffdf\017\uffdf\025\uffdf\026\uffdf\027\uffdf\032\uffdf" +
    "\036\uffdf\041\uffdf\051\uffdf\054\uffdf\055\uffdf\056\uffdf\001" +
    "\002\000\004\051\164\001\002\000\004\020\165\001\002" +
    "\000\004\051\166\001\002\000\004\012\167\001\002\000" +
    "\004\010\170\001\002\000\036\003\uffd1\014\uffd1\017\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\032\uffd1\036\uffd1\041\uffd1\050" +
    "\uffd1\051\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\034" +
    "\003\ufffd\014\ufffd\017\ufffd\025\ufffd\026\ufffd\027\ufffd\032" +
    "\ufffd\036\ufffd\041\ufffd\051\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\001\002\000\034\003\uffd8\014\uffd8\017\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\032\uffd8\036\uffd8\041\uffd8\051\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\001\002\000\014\024\044\034\040\035" +
    "\043\043\042\051\174\001\002\000\004\012\200\001\002" +
    "\000\004\012\176\001\002\000\004\010\177\001\002\000" +
    "\036\003\uffd2\014\uffd2\017\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\032\uffd2\036\uffd2\041\uffd2\050\uffd2\051\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\001\002\000\004\010\201\001\002\000\036" +
    "\003\uffd3\014\uffd3\017\uffd3\025\uffd3\026\uffd3\027\uffd3\032" +
    "\uffd3\036\uffd3\041\uffd3\050\uffd3\051\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\001\002\000\004\051\203\001\002\000\004\011" +
    "\204\001\002\000\016\003\210\004\056\005\052\006\053" +
    "\007\057\051\206\001\002\000\006\012\uffe7\020\uffe7\001" +
    "\002\000\006\012\uffe4\020\uffe4\001\002\000\004\051\314" +
    "\001\002\000\006\012\uffe3\020\uffe3\001\002\000\006\012" +
    "\213\020\212\001\002\000\016\003\210\004\056\005\052" +
    "\006\053\007\057\051\206\001\002\000\004\016\214\001" +
    "\002\000\032\003\230\017\ufff6\025\030\026\226\027\015" +
    "\032\032\041\033\050\215\051\224\054\034\055\023\056" +
    "\026\001\002\000\004\011\304\001\002\000\032\003\230" +
    "\017\ufff6\025\030\026\226\027\015\032\032\041\033\050" +
    "\215\051\224\054\034\055\023\056\026\001\002\000\032" +
    "\003\uffee\017\uffee\025\uffee\026\uffee\027\uffee\032\uffee\041" +
    "\uffee\050\uffee\051\uffee\054\uffee\055\uffee\056\uffee\001\002" +
    "\000\032\003\uffec\017\uffec\025\uffec\026\uffec\027\uffec\032" +
    "\uffec\041\uffec\050\uffec\051\uffec\054\uffec\055\uffec\056\uffec" +
    "\001\002\000\032\003\uffed\017\uffed\025\uffed\026\uffed\027" +
    "\uffed\032\uffed\041\uffed\050\uffed\051\uffed\054\uffed\055\uffed" +
    "\056\uffed\001\002\000\032\003\uffef\017\uffef\025\uffef\026" +
    "\uffef\027\uffef\032\uffef\041\uffef\050\uffef\051\uffef\054\uffef" +
    "\055\uffef\056\uffef\001\002\000\004\017\302\001\002\000" +
    "\006\011\275\015\274\001\002\000\032\003\ufff3\017\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\032\ufff3\041\ufff3\050\ufff3\051" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\024\003\243" +
    "\011\240\022\235\024\044\034\040\035\043\042\245\043" +
    "\042\051\242\001\002\000\032\003\ufff1\017\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\032\ufff1\041\ufff1\050\ufff1\051\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\001\002\000\034\003\230\010\uffd6" +
    "\017\ufff6\025\030\026\226\027\015\032\032\041\033\050" +
    "\215\051\224\054\034\055\023\056\026\001\002\000\004" +
    "\010\233\001\002\000\032\003\ufff4\017\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\032\ufff4\041\ufff4\050\ufff4\051\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\001\002\000\032\003\ufff2\017\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\032\ufff2\041\ufff2\050\ufff2\051\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\001\002\000\004\017\ufff7\001" +
    "\002\000\020\011\uffa5\024\uffa5\034\uffa5\035\uffa5\042\uffa5" +
    "\043\uffa5\051\uffa5\001\002\000\022\010\uffa8\012\uffa8\013" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\040\uffa8\001\002" +
    "\000\022\010\uffaf\012\uffaf\013\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\253\040\uffaf\001\002\000\024\003\243\011\240" +
    "\022\235\024\044\034\040\035\043\042\245\043\042\051" +
    "\242\001\002\000\004\040\266\001\002\000\024\010\uffaa" +
    "\011\260\012\uffaa\013\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\040\uffaa\001\002\000\014\010\uffb0\012\uffb0\013\uffb0" +
    "\020\uffb0\040\uffb0\001\002\000\022\010\uffac\012\uffac\013" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\040\uffac\001\002" +
    "\000\020\011\240\024\044\034\040\035\043\042\245\043" +
    "\042\051\242\001\002\000\020\011\240\024\044\034\040" +
    "\035\043\042\245\043\042\051\242\001\002\000\020\010" +
    "\uffb2\012\uffb2\013\uffb2\020\uffb2\021\250\022\251\040\uffb2" +
    "\001\002\000\024\003\243\011\240\022\235\024\044\034" +
    "\040\035\043\042\245\043\042\051\242\001\002\000\020" +
    "\011\240\024\044\034\040\035\043\042\245\043\042\051" +
    "\242\001\002\000\022\010\uffad\012\uffad\013\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\253\040\uffad\001\002\000\020\011" +
    "\240\024\044\034\040\035\043\042\245\043\042\051\242" +
    "\001\002\000\022\010\uffab\012\uffab\013\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\040\uffab\001\002\000\014\010\uffb1" +
    "\012\uffb1\013\uffb1\020\uffb1\040\uffb1\001\002\000\022\010" +
    "\uffae\012\uffae\013\uffae\020\uffae\021\uffae\022\uffae\023\253" +
    "\040\uffae\001\002\000\022\010\uffa6\012\uffa6\013\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\040\uffa6\001\002\000\024" +
    "\003\243\011\240\022\235\024\044\034\040\035\043\042" +
    "\245\043\042\051\242\001\002\000\006\012\uffa4\020\uffa4" +
    "\001\002\000\006\012\264\020\263\001\002\000\024\003" +
    "\243\011\240\022\235\024\044\034\040\035\043\042\245" +
    "\043\042\051\242\001\002\000\022\010\uffa9\012\uffa9\013" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\040\uffa9\001\002" +
    "\000\006\012\uffa3\020\uffa3\001\002\000\004\013\267\001" +
    "\002\000\032\003\025\014\ufff9\025\030\026\021\027\015" +
    "\032\032\036\022\041\033\051\016\054\034\055\023\056" +
    "\026\001\002\000\004\014\271\001\002\000\032\003\ufff5" +
    "\017\ufff5\025\ufff5\026\ufff5\027\ufff5\032\ufff5\041\ufff5\050" +
    "\ufff5\051\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002\000\004" +
    "\012\273\001\002\000\022\010\uffa7\012\uffa7\013\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\040\uffa7\001\002\000\024" +
    "\003\243\011\240\022\235\024\044\034\040\035\043\042" +
    "\245\043\042\051\242\001\002\000\016\003\210\004\056" +
    "\005\052\006\053\007\057\051\206\001\002\000\004\012" +
    "\277\001\002\000\006\010\uffd7\012\uffd7\001\002\000\004" +
    "\010\301\001\002\000\032\003\ufff0\017\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\032\ufff0\041\ufff0\050\ufff0\051\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\001\002\000\034\003\ufffe\014\ufffe\017" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\032\ufffe\036\ufffe\041\ufffe" +
    "\051\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\004\017" +
    "\ufff8\001\002\000\016\003\310\024\044\034\040\035\043" +
    "\043\042\051\307\001\002\000\004\012\uffe9\001\002\000" +
    "\004\012\uffea\001\002\000\006\011\275\012\uffe8\001\002" +
    "\000\004\012\uffd6\001\002\000\004\012\312\001\002\000" +
    "\032\003\uffeb\017\uffeb\025\uffeb\026\uffeb\027\uffeb\032\uffeb" +
    "\041\uffeb\050\uffeb\051\uffeb\054\uffeb\055\uffeb\056\uffeb\001" +
    "\002\000\006\012\uffe6\020\uffe6\001\002\000\006\012\uffe5" +
    "\020\uffe5\001\002\000\004\040\316\001\002\000\004\013" +
    "\317\001\002\000\032\003\025\014\ufff9\025\030\026\021" +
    "\027\015\032\032\036\022\041\033\051\016\054\034\055" +
    "\023\056\026\001\002\000\004\014\321\001\002\000\034" +
    "\003\uffe2\014\uffe2\017\uffe2\025\uffe2\026\uffe2\027\uffe2\032" +
    "\uffe2\036\uffe2\041\uffe2\051\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\001\002\000\004\002\000\001\002\000\024\003\243\011" +
    "\240\022\235\024\044\034\040\035\043\042\245\043\042" +
    "\051\242\001\002\000\004\010\325\001\002\000\034\003" +
    "\uffdd\014\uffdd\017\uffdd\025\uffdd\026\uffdd\027\uffdd\032\uffdd" +
    "\036\uffdd\041\uffdd\051\uffdd\054\uffdd\055\uffdd\056\uffdd\001" +
    "\002\000\024\003\243\011\240\022\235\024\044\034\040" +
    "\035\043\042\245\043\042\051\242\001\002\000\004\012" +
    "\330\001\002\000\004\013\331\001\002\000\026\003\332" +
    "\025\030\026\021\027\015\032\032\041\033\051\016\054" +
    "\034\055\023\056\026\001\002\000\030\003\332\010\uffd6" +
    "\025\030\026\021\027\015\032\032\041\033\051\016\054" +
    "\034\055\023\056\026\001\002\000\004\014\334\001\002" +
    "\000\042\003\uffb8\014\uffb8\017\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\337\031\336\032\uffb8\036\uffb8\041\uffb8\050\uffb8" +
    "\051\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000\036\003" +
    "\uffbb\014\uffbb\017\uffbb\025\uffbb\026\uffbb\027\uffbb\032\uffbb" +
    "\036\uffbb\041\uffbb\050\uffbb\051\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\001\002\000\004\013\345\001\002\000\024\003\243" +
    "\011\240\022\235\024\044\034\040\035\043\042\245\043" +
    "\042\051\242\001\002\000\004\013\341\001\002\000\026" +
    "\003\332\025\030\026\021\027\015\032\032\041\033\051" +
    "\016\054\034\055\023\056\026\001\002\000\004\014\343" +
    "\001\002\000\042\003\uffb8\014\uffb8\017\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\337\031\336\032\uffb8\036\uffb8\041\uffb8" +
    "\050\uffb8\051\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000" +
    "\036\003\uffba\014\uffba\017\uffba\025\uffba\026\uffba\027\uffba" +
    "\032\uffba\036\uffba\041\uffba\050\uffba\051\uffba\054\uffba\055" +
    "\uffba\056\uffba\001\002\000\026\003\332\025\030\026\021" +
    "\027\015\032\032\041\033\051\016\054\034\055\023\056" +
    "\026\001\002\000\004\014\347\001\002\000\036\003\uffb9" +
    "\014\uffb9\017\uffb9\025\uffb9\026\uffb9\027\uffb9\032\uffb9\036" +
    "\uffb9\041\uffb9\050\uffb9\051\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\001\002\000\006\014\ufffa\017\ufffa\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\023\007\016" +
    "\012\011\013\030\015\034\017\017\020\007\026\013\034" +
    "\010\035\012\041\026\001\001\000\030\003\023\007\347" +
    "\012\011\013\030\015\034\017\017\020\007\026\013\034" +
    "\010\035\012\041\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\314\005\235\021\246\022\236\023\245\024" +
    "\243\001\001\000\004\006\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\023\012\011\013\030\015" +
    "\171\017\017\020\170\026\013\034\010\035\012\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\054" +
    "\001\001\000\002\001\001\000\030\003\023\007\035\012" +
    "\011\013\030\015\034\017\017\020\007\026\013\034\010" +
    "\035\012\041\026\001\001\000\002\001\001\000\004\005" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\060\016\062\033\065\001\001\000" +
    "\002\001\001\000\004\005\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\102\001\001\000\012\005\105\036\107\037" +
    "\110\040\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\113\001\001\000\002\001\001\000\012\005\105\036" +
    "\107\037\115\040\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\023\007\131\012\011\013\030" +
    "\015\034\017\017\020\007\026\013\034\010\035\012\041" +
    "\026\001\001\000\002\001\001\000\004\027\133\001\001" +
    "\000\002\001\001\000\030\003\023\007\135\012\011\013" +
    "\030\015\034\017\017\020\007\026\013\034\010\035\012" +
    "\041\026\001\001\000\002\001\001\000\004\027\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\023" +
    "\007\142\012\011\013\030\015\034\017\017\020\007\026" +
    "\013\034\010\035\012\041\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\023\007\157\012\011" +
    "\013\030\015\034\017\017\020\007\026\013\034\010\035" +
    "\012\041\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\206" +
    "\010\204\042\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\206\010\312\001\001\000\002\001\001\000" +
    "\026\003\226\012\217\013\231\017\224\026\221\030\222" +
    "\031\215\034\216\035\220\041\230\001\001\000\002\001" +
    "\001\000\026\003\226\012\217\013\231\017\224\026\221" +
    "\030\302\031\215\034\216\035\220\041\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\240\005\235\021\246\022\236\023\245" +
    "\024\243\001\001\000\002\001\001\000\026\003\226\012" +
    "\217\013\231\017\224\026\221\030\233\031\215\034\216" +
    "\035\220\041\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\271\005" +
    "\235\021\246\022\236\023\245\024\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\235\024\256\001\001\000\010\005\235" +
    "\022\255\024\243\001\001\000\002\001\001\000\016\004" +
    "\254\005\235\021\246\022\236\023\245\024\243\001\001" +
    "\000\010\005\235\022\251\024\243\001\001\000\002\001" +
    "\001\000\006\005\235\024\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\260\005\235\021\246\022\236\023\245\024\243" +
    "\025\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\264\005\235\021\246\022\236\023\245\024\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\023\007\267\012\011\013\030\015\034" +
    "\017\017\020\007\026\013\034\010\035\012\041\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\277\005\235\021\246\022" +
    "\236\023\245\024\243\001\001\000\006\006\206\010\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\305\032\310\041\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\023\007\317\012\011\013\030\015\034\017\017\020" +
    "\007\026\013\034\010\035\012\041\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\323\005\235\021\246\022\236\023\245\024\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\326\005" +
    "\235\021\246\022\236\023\245\024\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\023\012\011\013" +
    "\030\015\332\017\017\026\013\034\010\035\012\041\026" +
    "\001\001\000\024\003\023\012\011\013\030\015\171\017" +
    "\017\026\013\034\010\035\012\041\026\001\001\000\002" +
    "\001\001\000\004\014\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\337\005\235\021\246\022\236" +
    "\023\245\024\243\001\001\000\002\001\001\000\024\003" +
    "\023\012\011\013\030\015\341\017\017\026\013\034\010" +
    "\035\012\041\026\001\001\000\002\001\001\000\004\014" +
    "\343\001\001\000\002\001\001\000\024\003\023\012\011" +
    "\013\030\015\345\017\017\026\013\034\010\035\012\041" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static Nodo arbol;
    public static int token=0;
    public static int parNum=0;
    
    public static int SintacticError =0;

    public String tokenes_id(int id){
        switch(id){
            case 0: return "EOF";
            case 1: return "error";
            case 2: return "VERDAD";
            case 3: return "NUMERITO";
            case 4: return "LETRA";
            case 5: return "WORD";
            case 6: return "PUNTOC";
            case 7: return "PARENTESISA";
            case 8: return "PARENTESISC";
            case 9: return "ABRIRC";
            case 10: return "CERRARC";
            case 11: return "ASSIGNMENT";
            case 12: return "BRACKETA";
            case 13: return "BRACKETC";
            case 14: return "COMMA";
            case 15: return "OPER";
            case 16: return "OPEA_SUM";
            case 17: return "OPEA_MULT";
            case 18: return "BOOL";
            case 19: return "FOR";
            case 20: return "WLE";
            case 21: return "IF";
            case 22: return "EIF";
            case 23: return "ELSE";
            case 24: return "BLOCK";
            case 25: return "END";
            case 26: return "NUM";
            case 27: return "LETTER";
            case 28: return "FUNC";
            case 29: return "START";
            case 30: return "FLECHA";
            case 31: return "VAR";
            case 32: return "NOT";
            case 33: return "IN";
            case 34: return "PUNTO";
            case 35: return "CASE";
            case 36: return "DEFAULT";
            case 37: return "REPLY";
            case 38: return "ID";
            case 39: return "ARRAY";
            case 40: return "NEW";
            case 41: return "THROW";
            case 42: return "THROWDOWN";
            case 43: return "CATCH";
            default: return "Nothing";
        }
    }

         /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Columna " + (s.left) +
        " linear "+s.right+ ". No se esperaba este componente: " +s.value+".");
        
        SintacticError++;

        List expected =expected_token_ids();
        if(expected.size()!=0){
            int id;
            System.out.print("TOKEN ESPERADO..");
            for(int i=0;i<expected.size();i++){
                id = (int) expected.get(i);
                    if (i == expected.size() - 1) {
                        System.out.println(tokenes_id(id));
                    } else {
                        System.out.println(tokenes_id(id) + " | ");
                    }
            }
        }
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la columna " + 
        (s.left)+ " linear "+s.right+". Componente " + s.value + 
        " no reconocido.");
        System.out.println("Sintaxis mal escrito,irrecuperable"); 
    }  
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= START FLECHA BRACKETA body BRACKETC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo start = new Nodo("Start",token);
    parser.token ++;

    start.addHijo((Nodo)b);
 
    
    parser.arbol = start;
    RESULT = start;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declara_simple ::= VAR type ID declara_puntoc 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo decl = new Nodo("Declaracion Simple",  parser.token);
        parser.token++;

        Nodo variable=new Nodo("Variable",parser.token);
        parser.token++;

        variable.addHijo(v.toString(),parser.token);
        decl.addHijo(variable);
        parser.token++;

        decl.addHijo((Nodo)t);

        Nodo id=new Nodo("ID",parser.token);
        parser.token++;

        id.addHijo(ide.toString(),parser.token);
        decl.addHijo(id);
        parser.token++;

        decl.addHijo((Nodo)dc);

        RESULT = decl;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_simple",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funciones ::= FUNC type ID PARENTESISA declaParametro PARENTESISC BRACKETA bodyf BRACKETC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node= new Nodo("Funciones",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("Funcion",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo((Nodo)t);

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;

    node.addHijo((Nodo)p);


    node.addHijo((Nodo)b);


    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= error funciones 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo fun = new Nodo("Funcion",parser.token);
    parser.token++;

    fun.addHijo("Error",parser.token);

    if(f!=null){
        fun.addHijitos(((Nodo)f).getHijos());
    }

     RESULT = fun;
 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CicloFor ::= FOR PARENTESISA ID IN NUM PUNTO PUNTO PUNTO NUM PARENTESISC FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-11)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        Nodo ciclo = new Nodo("CicloFor",parser.token);
        parser.token++;

        Nodo ID=new Nodo("Id",parser.token);
        parser.token++;
        ID.addHijo(ide.toString(),parser.token);
        
        ciclo.addHijo(ID);
        parser.token++;
 
        Nodo num1=new Nodo("num",parser.token);
        parser.token++;
        num1.addHijo(n.toString(),parser.token);
        parser.token++;
        ciclo.addHijo(num1);

        Nodo num2=new Nodo("num",parser.token);
        parser.token++;
        num2.addHijo(n1.toString(),parser.token);
        parser.token++;
        ciclo.addHijo(num2);

        ciclo.addHijo((Nodo)b);

        RESULT= ciclo;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CicloFor",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-13)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= proposition body 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo bodyn = new Nodo("body",  parser.token);
        parser.token++;
        bodyn.addHijo((Nodo) p);
        
        if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }

        RESULT = bodyn;
                

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= funciones body 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo funciones=new Nodo("Funciones",parser.token);
    parser.token++;

    funciones.addHijo((Nodo)f);

    if(b!=null){
        funciones.addHijitos(((Nodo)b).getHijos());
    }

    RESULT= funciones;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= 
            {
              Object RESULT =null;
		
    Nodo node=new Nodo("Vacio",parser.token);
    parser.token++;
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bodyf ::= propositionf bodyf 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo bodyn = new Nodo("body",  parser.token);
        parser.token++;

        bodyn.addHijo((Nodo) p);
        
        if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }

        RESULT = bodyn;
                

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyf",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bodyf ::= error bodyf 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo bodyn = new Nodo("body",  parser.token);
    parser.token++;
    bodyn.addHijo("Error",parser.token);
    parser.token++;
    if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }
    RESULT=bodyn;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyf",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bodyf ::= 
            {
              Object RESULT =null;
		
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bodyf",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // propositionf ::= WLE expression FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo whil=new Nodo("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)b);

    RESULT= node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // propositionf ::= declara_simple 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;
    node.addHijo((Nodo)d);
    
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // propositionf ::= CicloFor 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("CicloFor",parser.token);
    parser.token++;
    node.addHijo((Nodo)cf);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // propositionf ::= llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        RESULT=lf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // propositionf ::= ifState 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = ife;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // propositionf ::= ID ASSIGNMENT expression PUNTOC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		

    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;
    
    Nodo assing =new Nodo("=",parser.token);
    parser.token++;
    node.addHijo(assing);
    
    node.addHijo((Nodo)e);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // propositionf ::= block_switch 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=b;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // propositionf ::= print 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=p;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // propositionf ::= catch 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=c;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // propositionf ::= declara_array 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // propositionf ::= REPLY PARENTESISA devolverFunc PARENTESISC 
            {
              Object RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    RESULT=df;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("propositionf",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // devolverFunc ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=v;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("devolverFunc",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // devolverFunc ::= llamadaFunc 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=lf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("devolverFunc",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // devolverFunc ::= ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(ide.toString(),parser.token);
    
    parser.token++;

    RESULT = ID;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("devolverFunc",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaParametro ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		

    RESULT=p;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaParametro",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaParametro ::= declaParametro COMMA parametro 
            {
              Object RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node= new Nodo("Decla",parser.token);
    parser.token++;

    if(dp!=null){
        node.addHijitos(((Nodo)dp).getHijos());
    }
    if(p!=null){
        node.addHijitos(((Nodo)p).getHijos());
    }
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaParametro",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametro ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametro",parser.token);
    parser.token++;

    node.addHijo((Nodo)t);

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametro ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Parametro",parser.token);
    parser.token++;

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametro ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("Erros-parametro",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // proposition ::= WLE expression FLECHA ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo whil=new Nodo("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)p);

    RESULT= node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // proposition ::= declara_simple 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;
    node.addHijo((Nodo)d);
    
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // proposition ::= CicloFor 
            {
              Object RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("CicloFor",parser.token);
    parser.token++;
    node.addHijo((Nodo)cf);

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // proposition ::= llamadaFunc PUNTOC 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
        RESULT=lf;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // proposition ::= ifState 
            {
              Object RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ife = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    RESULT = ife;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proposition ::= ID ASSIGNMENT expression PUNTOC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		

    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;

    node.addHijo((Nodo)e);


    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // proposition ::= block_switch 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=b;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // proposition ::= print 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=p;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // proposition ::= catch 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=c;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // proposition ::= declara_array 
            {
              Object RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT = da;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // proposition ::= error proposition 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    node.addHijo("Error",parser.token);

    if(p!=null){
        node.addHijitos(((Nodo)p).getHijos());
    }

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("proposition",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamadaFunc ::= ID PARENTESISA parametro PARENTESISC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("Llamada de funciones",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    node.addHijo((Nodo)p);

    RESULT = node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamadaFunc",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // llamadaFunc ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("Erros-callFunc",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("llamadaFunc",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // print ::= THROW PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID-print",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // print ::= THROW PARENTESISA valores PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo thro=new Nodo("Throw",parser.token);
    parser.token++;
    node.addHijo(thro);

    node.addHijo((Nodo)v);
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // print ::= THROWDOWN PARENTESISA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID-print",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // print ::= THROWDOWN PARENTESISA valores PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    node.addHijo((Nodo)v);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("print",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // catch ::= CATCH PARENTESISA ID COMMA ID PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int ide2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int ide2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ide2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		
    Nodo node=new Nodo("Empieza el catch",parser.token);
    parser.token++;

    Nodo catche=new Nodo("Catch",parser.token);
    parser.token++;
    node.addHijo(catche);

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    Nodo id_2=new Nodo("ID",parser.token);
    parser.token++;

    id_2.addHijo(ide2.toString(),parser.token);
    node.addHijo(id_2); 
    parser.token++;
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("catch",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= VERDAD 
            {
              Object RESULT =null;
		
    
    Nodo node = new Nodo("Boolena",  parser.token);
    parser.token++;
    RESULT = node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= NUMERITO 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("NUM",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= LETRA 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("Caracter",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= WORDS 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("String",  parser.token);
    parser.token++;
    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declara_puntoc ::= PUNTOC 
            {
              Object RESULT =null;
		
    Nodo node =new Nodo(";",parser.token);
    parser.token++;

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_puntoc",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declara_puntoc ::= asigna 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    RESULT = as;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_puntoc",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asigna ::= ASSIGNMENT valores PUNTOC 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("asignacion",parser.token);
    parser.token++;
  
    node.addHijo((Nodo)v);
 
    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asigna",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asigna ::= ASSIGNMENT ID PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("asignacion",parser.token);
    parser.token++;
 
    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asigna",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asigna ::= vacio PUNTOC 
            {
              Object RESULT =null;
		
    Nodo node=new Nodo("asignacion",parser.token);
    parser.token++;
  
    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asigna",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asigna ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("Error-asignacion",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asigna",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA NUM PARENTESISC PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		

    Nodo node = new Nodo("Declara Array",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    Nodo num2=new Nodo("num",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);


    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_array",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA NUM PARENTESISC bracket_valores PUNTOC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int bvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object bv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node = new Nodo("Declara Array",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo num2=new Nodo("num",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);

    
 
    node.addHijo((Nodo)bv);

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declara_array",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bracket_valores ::= BRACKETA list_valores BRACKETC 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    RESULT=lv;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bracket_valores",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // list_valores ::= arrayData COMMA list_valores 
            {
              Object RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);

    if(lv!=null){
        node.addHijitos(((Nodo)lv).getHijos());
    }
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_valores",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // list_valores ::= arrayData 
            {
              Object RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_valores",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list_valores ::= bracket_valores COMMA bracket_valores 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("bracket-segunda dimension",parser.token);
    parser.token++;

    node.addHijo((Nodo)b);
    node.addHijo((Nodo)b1);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_valores",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arrayData ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=v;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("arrayData",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // valores ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores-num",parser.token);
    parser.token++;
    node.addHijo(n.toString(),parser.token);
    parser.token++;

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valores ::= BOOL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores-boolean",parser.token);
    parser.token++;
    node.addHijo(b.toString(),parser.token);
    parser.token++;

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valores ::= WORD 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores-streuhb",parser.token);
    parser.token++;
    node.addHijo(l.toString(),parser.token);
    parser.token++;

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valores ::= LETTER 
            {
              Object RESULT =null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object L = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Valores-caracter",parser.token);
    parser.token++;
    node.addHijo(L.toString(),parser.token);
    parser.token++;

    RESULT = node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ifState ::= IF PARENTESISA expression PARENTESISC ABRIRC proposition CERRARC eif 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Empiezo IF",parser.token);
    parser.token++;

    Nodo ife=new Nodo("IF",parser.token);
    parser.token++;
    node.addHijo(ife);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)p);

    node.addHijo((Nodo)ei);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ifState",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // eif ::= EIF expression ABRIRC proposition CERRARC eif 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eifeleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eiferight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object eife = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Else if",parser.token);
    parser.token++;

    Nodo ei=new Nodo("eif",parser.token);
    parser.token++;
    node.addHijo(ei);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)p);


    if(eife!=null){
        node.addHijitos(((Nodo)eife).getHijos());
    }

    RESULT= node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("eif",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // eif ::= ELSE ABRIRC proposition CERRARC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("Else if",parser.token);
    parser.token++;

    Nodo ei=new Nodo("else",parser.token);
    parser.token++;
    node.addHijo(ei);

    node.addHijo((Nodo)p);
 
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("eif",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // eif ::= 
            {
              Object RESULT =null;
		
    Nodo node = new Nodo("Vacio",parser.token);
    parser.token++;
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("eif",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // block_switch ::= BLOCK PARENTESISA ID PARENTESISC FLECHA cases END 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
   
    Nodo node=new Nodo("Bloque Switch",parser.token);
    parser.token++;

    Nodo block=new Nodo("Block",parser.token);
    parser.token++;
    node.addHijo(block);
 
    Nodo id=new Nodo("Id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
   
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }

    Nodo end=new Nodo("end",parser.token);
    parser.token++;
    node.addHijo(end);

    RESULT = node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("block_switch",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cases ::= CASE ID ABRIRC body CERRARC cases 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    node.addHijo(cas);

    Nodo id=new Nodo("Id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
 
    node.addHijo((Nodo)b);
 
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }
    
    RESULT = node;
    


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cases ::= CASE valores ABRIRC body CERRARC cases 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    node.addHijo(cas);

    node.addHijo((Nodo)v);
 
    node.addHijo((Nodo)b);
  
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }

    RESULT= node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cases ::= DEFAULT ABRIRC body CERRARC 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;
 
    node.addHijo((Nodo)b);
 
    RESULT=node;
    

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cases ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("Erros-case",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("cases",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression_simple 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    RESULT=es;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression_simple OPER expression 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node =new Nodo("expression simple",parser.token);
    parser.token++;
    node.addHijo((Nodo)es);

    Nodo oper=new Nodo("Operador Relacional",parser.token);
    parser.token++;

    oper.addHijo(op.toString(),parser.token);
    parser.token++;

    node.addHijo(oper);

    if(ex!=null){
        node.addHijitos(((Nodo)ex).getHijos());
    }
    
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= error 
            {
              Object RESULT =null;
		
    Nodo error=new Nodo("Error-expression",parser.token);
    parser.token++;

    RESULT=error;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression_simple ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    RESULT=t;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression_simple",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression_simple ::= signo termino 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Expresion simple-signo",parser.token);
    parser.token++;

    node.addHijo((Nodo)s);
    node.addHijo((Nodo)t);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression_simple",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression_simple ::= expression_simple OPEA_SUM termino 
            {
              Object RESULT =null;
		int exsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int exsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object exs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Expresion simple",parser.token);
    parser.token++;

    if(exs!=null){
        node.addHijitos(((Nodo)exs).getHijos());
    }

    Nodo opea_sum=new Nodo("Operacion de Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;
    node.addHijo(opea_sum);

    node.addHijo((Nodo)t);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression_simple",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    RESULT=f;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= termino OPEA_MULT factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node =new Nodo("Termino",parser.token);
    parser.token++;

    if(t!=null){
        node.addHijitos(((Nodo)t).getHijos());
    }
    Nodo opea_mult=new Nodo("Operador de Multiplicacion/Division",parser.token);
    parser.token++;

    opea_mult.addHijo(op.toString(),parser.token++);
    parser.token++;

    node.addHijo(opea_mult);

    node.addHijo((Nodo)f);

    RESULT=node;


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= ID 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= ID PARENTESISA list_expression PARENTESISC 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
    

    node.addHijo((Nodo)list);
   
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= valores 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    
    RESULT=v;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= PARENTESISA expression PARENTESISC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;
    
    node.addHijo((Nodo)e);
   
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= NOT factor 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo(" factor",parser.token);
    parser.token++;

    Nodo not=new Nodo("Not",parser.token);
    parser.token++;
    not.addHijo(n.toString(),parser.token);

    if(f!=null){
        node.addHijitos(((Nodo)f).getHijos());
    }

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // signo ::= OPEA_SUM 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node= new Nodo("Signo",parser.token);
    parser.token++;

    Nodo opea_sum=new Nodo("Operacion Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;

    node.addHijo(opea_sum);

    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("signo",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // list_expression ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Lista de Expresiones",parser.token);
    parser.token++;
    node.addHijo((Nodo)e);

    RESULT=e;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_expression",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // list_expression ::= list_expression COMMA expression 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
    Nodo node=new Nodo("Lista de Expresiones",parser.token);
    parser.token++;

    if(list!=null){
        node.addHijitos(((Nodo)list).getHijos());
    }
    Nodo coma=new Nodo(",",parser.token);
    parser.token++;
    node.addHijo(coma);

    node.addHijo((Nodo)e);
    
    RESULT=node;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("list_expression",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
