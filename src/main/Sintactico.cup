package main;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;

parser code
{:
    public static Nodo arbol;
    public static int token=0;
    public static int parNum=0;
    
    public static int SintacticError =0;

    public String tokenes_id(int id){
        switch(id){
            case 0: return "EOF";
            case 1: return "error";
            case 2: return "VERDAD";
            case 3: return "NUMERITO";
            case 4: return "LETRA";
            case 5: return "WORD";
            case 6: return "PUNTOC";
            case 7: return "PARENTESISA";
            case 8: return "PARENTESISC";
            case 9: return "ABRIRC";
            case 10: return "CERRARC";
            case 11: return "ASSIGNMENT";
            case 12: return "BRACKETA";
            case 13: return "BRACKETC";
            case 14: return "COMMA";
            case 15: return "OPER";
            case 16: return "OPEA_SUM";
            case 17: return "OPEA_MULT";
            case 18: return "BOOL";
            case 19: return "FOR";
            case 20: return "WLE";
            case 21: return "IF";
            case 22: return "EIF";
            case 23: return "ELSE";
            case 24: return "BLOCK";
            case 25: return "END";
            case 26: return "NUM";
            case 27: return "LETTER";
            case 28: return "FUNC";
            case 29: return "START";
            case 30: return "FLECHA";
            case 31: return "VAR";
            case 32: return "NOT";
            case 33: return "IN";
            case 34: return "PUNTO";
            case 35: return "CASE";
            case 36: return "DEFAULT";
            case 37: return "REPLY";
            case 38: return "ID";
            case 39: return "ARRAY";
            case 40: return "NEW";
            case 41: return "THROW";
            case 42: return "THROWDOWN";
            case 43: return "CATCH";
            default: return "Nothing";
        }
    }

         /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Columna " + (s.left) +
        " linear "+s.right+ ". No se esperaba este componente: " +s.value+".");
        
        SintacticError++;

        List expected =expected_token_ids();
        if(expected.size()!=0){
            int id;
            System.out.print("TOKEN ESPERADO..");
            for(int i=0;i<expected.size();i++){
                id = (int) expected.get(i);
                    if (i == expected.size() - 1) {
                        System.out.println(tokenes_id(id));
                    } else {
                        System.out.println(tokenes_id(id) + " | ");
                    }
            }
        }
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la columna " + 
        (s.left)+ " linear "+s.right+". Componente " + s.value + 
        " no reconocido.");
        System.out.println("Sintaxis mal escrito,irrecuperable"); 
    }  
    
:}




//lexemas
terminal  VERDAD, NUMERITO, LETRA, WORD ;


//palabras reservadas y Operadores

terminal PUNTOC, PARENTESISA, PARENTESISC, ABRIRC, CERRARC , ASSIGNMENT, BRACKETA, BRACKETC, COMMA;
terminal OPER, OPEA_SUM, OPEA_MULT, BOOL,  FOR, WLE, IF, EIF, ELSE ,BLOCK, END;
terminal NUM, LETTER, FUNC, START ,FLECHA,  VAR ,  NOT, LETTERS;
terminal IN, PUNTO, CASE,DEFAULT, REPLY, ID;
terminal ARRAY,NEW;
terminal THROW,THROWDOWN,CATCH;

//not terminales
non terminal Program;
non terminal ifState;
non terminal expression;
non terminal valores;
non terminal type;
non terminal body;
non terminal parametro;
//non terminal declara;
non terminal declara_puntoc;
non terminal declara_array;
non terminal declara_simple;
non terminal eif;
non terminal proposition;
non terminal asigna;
non terminal CicloFor;
non terminal funciones;
non terminal expression_simple;
non terminal termino;
non terminal signo;
non terminal factor;
//non terminal factor_for;
non terminal list_expression;
non terminal block_switch;
non terminal cases;
//recursiva funciones
non terminal bodyf;
non terminal propositionf;
non terminal devolverFunc;

non terminal vacio;
non terminal print;
non terminal catch;
non terminal bracket_valores;
non terminal list_valores;
non terminal arrayData;
non terminal llamadaFunc;

start with Program;

//program
Program ::= START  FLECHA BRACKETA body:b BRACKETC
{:
    Nodo start = new Nodo("Start",token);
    parser.token ++;

    start.addHijo((Nodo)b);
 
    

    parser.arbol = start;
    RESULT = start;
:};

//declara ::= VAR type ID ASSIGNMENT  valores  PUNTOC;

declara_simple::= VAR:v type:t ID:ide declara_puntoc:dc
{:
        Nodo decl = new Nodo("Declaracion Simple",  parser.token);
        parser.token++;

        Nodo variable=new Nodo("Variable",parser.token);
        parser.token++;

        variable.addHijo(v.toString(),parser.token);
        decl.addHijo(variable);
        parser.token++;

        decl.addHijo((Nodo)t);

        Nodo id=new Nodo("ID",parser.token);
        parser.token++;

        id.addHijo(ide.toString(),parser.token);
        decl.addHijo(id);
        parser.token++;

        decl.addHijo((Nodo)dc);

        RESULT = decl;
    
:}
;
//bodyf= REPLY PARENTESISA parametro:p2 PARENTESISC BRACKETC
funciones::= FUNC type:t ID:ide PARENTESISA parametro:p PARENTESISC BRACKETA bodyf:b BRACKETC

{:
    Nodo node= new Nodo("Funciones",parser.token);
    parser.token++;

    Nodo funciones=new Nodo("Funcion",parser.token);
    parser.token++;
    node.addHijo(funciones);

    node.addHijo((Nodo)t);

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id);
    parser.token++;

    node.addHijo((Nodo)p);


    node.addHijo((Nodo)b);


    RESULT= node;
:}
    | error funciones:f
 {:
    Nodo fun = new Nodo("Funcion",parser.token);
    parser.token++;

    fun.addHijo("Error",parser.token);

    if(f!=null){
        fun.addHijitos(((Nodo)f).getHijos());
    }

     RESULT = fun;
 :};

CicloFor::= FOR PARENTESISA ID:ide IN NUM:n PUNTO PUNTO PUNTO NUM:n1 PARENTESISC FLECHA ABRIRC body:b CERRARC
{:
        Nodo ciclo = new Nodo("For",parser.token);
        parser.token++;

        Nodo ID=new Nodo("Id",parser.token);
        parser.token++;
        ID.addHijo(ide.toString(),parser.token);
        
        ciclo.addHijo(ID);
        parser.token++;
 
        Nodo num1=new Nodo("num",parser.token);
        parser.token++;
        num1.addHijo(n.toString(),parser.token);
        parser.token++;
        ciclo.addHijo(num1);

        Nodo num2=new Nodo("num",parser.token);
        parser.token++;
        num2.addHijo(n1.toString(),parser.token);
        parser.token++;
        ciclo.addHijo(num2);

        ciclo.addHijo((Nodo)b);

        RESULT= ciclo;
:};
//body
body::= proposition:p body:b  {:
        Nodo bodyn = new Nodo("body",  parser.token);
        parser.token++;
        bodyn.addHijo((Nodo) p);
        
        if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }

        RESULT = bodyn;
                
:} 
|funciones:f body:b 
{:
    Nodo funciones=new Nodo("Funciones",parser.token);
    parser.token++;

    funciones.addHijo((Nodo)f);

    if(b!=null){
        funciones.addHijitos(((Nodo)b).getHijos());
    }

    RESULT= funciones;
:}    
|{:
    Nodo node=new Nodo("Vacio",parser.token);
    parser.token++;
    RESULT=node;
:}
;



//body 
bodyf::= propositionf:p bodyf:b  {:
        Nodo bodyn = new Nodo("body",  parser.token);
        parser.token++;

        bodyn.addHijo((Nodo) p);
        
        if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }

        RESULT = bodyn;
                
:}
    | error bodyf:b   
{:
    Nodo bodyn = new Nodo("body",  parser.token);
    parser.token++;
    bodyn.addHijo("Error",parser.token);
    parser.token++;
    if(b!=null){
            bodyn.addHijitos(((Nodo)b).getHijos());
        }
    RESULT=bodyn;
:}
|{:
    
:}; 


//propositionF
propositionf::= WLE expression:e FLECHA ABRIRC body:b CERRARC
{:
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo whil=new Nodo("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)b);

    RESULT= node;

:}
    |   declara_simple:d
{:
    
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;
    node.addHijo((Nodo)d);
    
    RESULT = node;
:}
    |   CicloFor:cf
{:
    Nodo node = new Nodo("CicloFor",parser.token);
    parser.token++;
    node.addHijo((Nodo)cf);

    RESULT = node;
:}
    |   llamadaFunc:lf PUNTOC
{:
        RESULT=lf;
:}
    |   ifState:ife
{:
    RESULT = ife;
:}
    |   ID:id ASSIGNMENT expression:e PUNTOC
{:

    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;
    
    Nodo assing =new Nodo("=",parser.token);
    parser.token++;
    node.addHijo(assing);
    
    node.addHijo((Nodo)e);

    RESULT = node;
:}
    |   block_switch:b
{:
    RESULT=b;
:}
    |   print:p
{:
    RESULT=p;
:}
    |   catch:c
{:
    RESULT=c;
:}
    |   declara_array:da 
{:
    RESULT = da;
:}  
    |   REPLY PARENTESISA devolverFunc:df PARENTESISC 
{:
    RESULT=df;
:};

//devuelve la funcion
devolverFunc::= valores:v
{:
    RESULT=v;
:}
    |       llamadaFunc:lf
{:
    RESULT=lf;
:}
    |       ID:ide
{:
    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(ide.toString(),parser.token);
    
    parser.token++;

    RESULT = ID;
:}
    ;

//parametro
parametro::= type:t ID:id
{:
    Nodo node=new Nodo("Parametro",parser.token);
    parser.token++;

    node.addHijo((Nodo)t);

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;

    RESULT=node;
:}
    | ID:id
{:
    Nodo node=new Nodo("Parametro",parser.token);
    parser.token++;

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;

    RESULT=node;
:}
    | error
{:
    Nodo error=new Nodo("Erros-parametro",parser.token);
    parser.token++;

    RESULT=error;
:};
//proposciones
proposition::= WLE expression:e FLECHA ABRIRC proposition:p CERRARC
{:
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo whil=new Nodo("while",parser.token);
    parser.token++;
    node.addHijo(whil);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)p);

    RESULT= node;

:}
   
    |   declara_simple:d
{:
    
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;
    node.addHijo((Nodo)d);
    
    RESULT = node;
:}
    |   CicloFor:cf
{:
    Nodo node = new Nodo("CicloFor",parser.token);
    parser.token++;
    node.addHijo((Nodo)cf);

    RESULT = node;
:}
    |   llamadaFunc:lf PUNTOC
{:
        RESULT=lf;
:}
    |   ifState:ife
{:
    
    RESULT = ife;
:}
    |   ID:id ASSIGNMENT expression:e PUNTOC
{:

    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    Nodo ID = new Nodo("ID",parser.token);
    parser.token++;

    ID.addHijo(id.toString(),parser.token);
    node.addHijo(ID);
    parser.token++;

    node.addHijo((Nodo)e);


    RESULT = node;
:}
    |   block_switch:b
{:
    RESULT=b;
:}
    |   print:p
{:
    RESULT=p;
:}
    |   catch:c
{:
    RESULT=c;
:}
    |declara_array:da 
{:
    RESULT = da;
:}
    | error proposition:p
{:
    Nodo node = new Nodo("Proposicion",parser.token);
    parser.token++;

    node.addHijo("Error",parser.token);

    if(p!=null){
        node.addHijitos(((Nodo)p).getHijos());
    }

    RESULT = node;
:};

//llamada de funciones

llamadaFunc ::= ID:ide PARENTESISA parametro:p PARENTESISC
{:
    Nodo node=new Nodo("Llamada de funciones",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    node.addHijo((Nodo)p);

    RESULT = node;

:}
    | error
{:
    Nodo error=new Nodo("Erros-callFunc",parser.token);
    parser.token++;

    RESULT=error;
:};

//impresiones
print::= THROW PARENTESISA ID:ide PARENTESISC PUNTOC
{:
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID-print",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    RESULT=node;
:}
    |   THROW PARENTESISA valores:v PARENTESISC PUNTOC
{:
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo thro=new Nodo("Throw",parser.token);
    parser.token++;
    node.addHijo(thro);

    node.addHijo((Nodo)v);
 
    RESULT=node;
:}
    |   THROWDOWN PARENTESISA ID:ide PARENTESISC PUNTOC
{:
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID-print",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT=node;
:}
    |   THROWDOWN PARENTESISA valores:v PARENTESISC PUNTOC
{:
    Nodo node=new Nodo("Print",parser.token);
    parser.token++;

    node.addHijo((Nodo)v);

    RESULT=node;
:};

//scanner     
catch::= CATCH PARENTESISA ID:ide COMMA ID:ide2 PARENTESISC PUNTOC
{:
    Nodo node=new Nodo("Empieza el catch",parser.token);
    parser.token++;

    Nodo catche=new Nodo("Catch",parser.token);
    parser.token++;
    node.addHijo(catche);

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    Nodo id_2=new Nodo("ID",parser.token);
    parser.token++;

    id_2.addHijo(ide2.toString(),parser.token);
    node.addHijo(id_2); 
    parser.token++;
 
    RESULT=node;
:};

//tipo
type::= VERDAD
{:
    
    Nodo node = new Nodo("Boolena",  parser.token);
    parser.token++;
    RESULT = node;
    
:}
    | NUMERITO
{:
    Nodo node = new Nodo("NUM",  parser.token);
    parser.token++;
    RESULT = node;
:}
    | LETRA
{:
    Nodo node = new Nodo("Caracter",  parser.token);
    parser.token++;
    RESULT = node;
:}
    | WORD
{:
    Nodo node = new Nodo("String",  parser.token);
    parser.token++;
    RESULT = node;
:};

//declara puntoC
declara_puntoc::= PUNTOC
{:
    Nodo node =new Nodo(";",parser.token);
    parser.token++;

    RESULT = node;
:}
    |   asigna:as
{:
    
    RESULT = as;
:};

//asignacion
asigna::= ASSIGNMENT valores:v PUNTOC
{:
    Nodo node=new Nodo("asignacion",parser.token);
    parser.token++;
  
    node.addHijo((Nodo)v);
 
    RESULT= node;
:}
    |   ASSIGNMENT ID:ide PUNTOC
{:
    Nodo node=new Nodo("asignacion",parser.token);
    parser.token++;
 
    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    RESULT= node;
:}
    |   vacio PUNTOC
{:
    Nodo node=new Nodo("asignacion",parser.token);
    parser.token++;
  
    RESULT= node;
:}
| error{:
    Nodo error=new Nodo("Error-asignacion",parser.token);
    parser.token++;

    RESULT=error;
:};

//array
declara_array::= VAR ID:ide ASSIGNMENT NEW ARRAY PARENTESISA NUM:n1 PARENTESISC  PUNTOC
{:

    Nodo node = new Nodo("Declara Array",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;
 
    Nodo num2=new Nodo("num",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);


    RESULT = node;
:} 
| VAR ID:ide ASSIGNMENT NEW ARRAY PARENTESISA NUM:n1 PARENTESISC  bracket_valores:bv PUNTOC
{:
    Nodo node = new Nodo("Declara Array",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;
    id.addHijo(ide.toString(),parser.token);
    node.addHijo(id); 
    parser.token++;

    Nodo num2=new Nodo("num",parser.token);
    parser.token++;
    num2.addHijo(n1.toString(),parser.token);
    parser.token++;
    node.addHijo(num2);

    
 
    node.addHijo((Nodo)bv);

    RESULT= node;
:}
;

bracket_valores::= BRACKETA list_valores:lv BRACKETC
{:
    RESULT=lv;
:};

list_valores::= arrayData:ad COMMA list_valores:lv
{:
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);

    if(lv!=null){
        node.addHijitos(((Nodo)lv).getHijos());
    }
    RESULT=node;
:}
| arrayData:ad
{:
    Nodo node=new Nodo("Valores",parser.token);
    parser.token++;
    node.addHijo((Nodo)ad);
    RESULT=node;
:}
| bracket_valores:b COMMA bracket_valores:b1
{:
    Nodo node=new Nodo("bracket-segunda dimension",parser.token);
    parser.token++;

    node.addHijo((Nodo)b);
    node.addHijo((Nodo)b1);

    RESULT=node;
:};

arrayData::= valores:v
{:
    RESULT=v;
:};
//valores
valores::= NUM:n
{:
    Nodo node=new Nodo("Valores-num",parser.token);
    parser.token++;
    node.addHijo(n.toString(),parser.token);
    parser.token++;

    RESULT = node;
:}
    |   BOOL:b
{:
    Nodo node=new Nodo("Valores-boolean",parser.token);
    parser.token++;
    node.addHijo(b.toString(),parser.token);
    parser.token++;

    RESULT = node;
:}
    |   LETTER:l
{:
    Nodo node=new Nodo("Valores-caracter",parser.token);
    parser.token++;
    node.addHijo(l.toString(),parser.token);
    parser.token++;

    RESULT = node;
:}
|   LETTERS:ls
{:
    Nodo node=new Nodo("String",parser.token);
    parser.token++;
    node.addHijo(ls.toString(),parser.token);
    parser.token++;

    RESULT = node;
:};

//if

ifState::= IF PARENTESISA expression:e PARENTESISC ABRIRC proposition:p CERRARC eif:ei
{:
    Nodo node=new Nodo("Empiezo IF",parser.token);
    parser.token++;

    Nodo ife=new Nodo("IF",parser.token);
    parser.token++;
    node.addHijo(ife);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)p);

    node.addHijo((Nodo)ei);

    RESULT=node;
:}
;

eif::= EIF expression:e ABRIRC proposition:p CERRARC eif:eife
{:
    Nodo node=new Nodo("Else if",parser.token);
    parser.token++;

    Nodo ei=new Nodo("eif",parser.token);
    parser.token++;
    node.addHijo(ei);

    node.addHijo((Nodo)e);

    node.addHijo((Nodo)p);


    if(eife!=null){
        node.addHijitos(((Nodo)eife).getHijos());
    }

    RESULT= node;
:}
    |   ELSE ABRIRC proposition:p CERRARC
{:
    Nodo node=new Nodo("Else if",parser.token);
    parser.token++;

    Nodo ei=new Nodo("else",parser.token);
    parser.token++;
    node.addHijo(ei);

    node.addHijo((Nodo)p);
 
    RESULT=node;
:}
    |   
{:
    Nodo node = new Nodo("Vacio",parser.token);
    parser.token++;
    RESULT=node;
:};

//bloque switch
//siwthc sale null.point exception nose porque
block_switch::= BLOCK PARENTESISA ID:ide PARENTESISC FLECHA cases:c END
{:
   
    Nodo node=new Nodo("Bloque Switch",parser.token);
    parser.token++;

    Nodo block=new Nodo("Block",parser.token);
    parser.token++;
    node.addHijo(block);
 
    Nodo id=new Nodo("Id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
   
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }

    Nodo end=new Nodo("end",parser.token);
    parser.token++;
    node.addHijo(end);

    RESULT = node;
    
:};

cases::= CASE ID:ide ABRIRC body:b CERRARC cases:c
{:
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    node.addHijo(cas);

    Nodo id=new Nodo("Id",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
 
    node.addHijo((Nodo)b);
 
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }
    
    RESULT = node;
    

:}
    |   CASE valores:v ABRIRC body:b CERRARC cases:c
{:
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;

    Nodo cas=new Nodo("Case",parser.token);
    parser.token++;
    node.addHijo(cas);

    node.addHijo((Nodo)v);
 
    node.addHijo((Nodo)b);
  
    if(c!=null){
        node.addHijitos(((Nodo)c).getHijos());
    }

    RESULT= node;
    
:}
    |   DEFAULT ABRIRC body:b CERRARC 
{:
    
    Nodo node=new Nodo("Cases",parser.token);
    parser.token++;
 
    node.addHijo((Nodo)b);
 
    RESULT=node;
    
:}
| error 
{:
    Nodo error=new Nodo("Erros-case",parser.token);
    parser.token++;

    RESULT=error;
:};
//expresiones
expression::= expression_simple:es
{:
    
    RESULT=es;
:}
    |   expression_simple:es OPER:op expression:ex
{:
    Nodo node =new Nodo("expression simple",parser.token);
    parser.token++;
    node.addHijo((Nodo)es);

    Nodo oper=new Nodo("Operador Relacional",parser.token);
    parser.token++;

    oper.addHijo(op.toString(),parser.token);
    parser.token++;

    node.addHijo(oper);

    if(ex!=null){
        node.addHijitos(((Nodo)ex).getHijos());
    }
    
    RESULT=node;
:}
| error 
{:
    Nodo error=new Nodo("Error-expression",parser.token);
    parser.token++;

    RESULT=error;
:};

expression_simple::= termino:t
{:
    
    RESULT=t;
:}
    |   signo:s termino:t
{:
    Nodo node=new Nodo("Expresion simple-signo",parser.token);
    parser.token++;

    node.addHijo((Nodo)s);
    node.addHijo((Nodo)t);

    RESULT=node;
:}
    |   expression_simple:exs OPEA_SUM:op termino:t
{:
    Nodo node=new Nodo("Expresion simple",parser.token);
    parser.token++;

    if(exs!=null){
        node.addHijitos(((Nodo)exs).getHijos());
    }

    Nodo opea_sum=new Nodo("Operacion de Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;
    node.addHijo(opea_sum);

    node.addHijo((Nodo)t);

    RESULT=node;
:};

termino::= factor:f
{:
    RESULT=f;
:}
    |   termino:t OPEA_MULT:op factor:f
{:
    Nodo node =new Nodo("Termino",parser.token);
    parser.token++;

    if(t!=null){
        node.addHijitos(((Nodo)t).getHijos());
    }
    Nodo opea_mult=new Nodo("Operador de Multiplicacion/Division",parser.token);
    parser.token++;

    opea_mult.addHijo(op.toString(),parser.token++);
    parser.token++;

    node.addHijo(opea_mult);

    node.addHijo((Nodo)f);

    RESULT=node;

:};
//tener cuidado con el not
factor::= ID:ide
{:
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);

    RESULT=node;
:}
    |   ID:ide PARENTESISA list_expression:list PARENTESISC
{:
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;

    Nodo id=new Nodo("ID",parser.token);
    parser.token++;

    id.addHijo(ide.toString(),parser.token);
    parser.token++;
    node.addHijo(id);
    

    node.addHijo((Nodo)list);
   
    RESULT=node;
:}
    |   valores:v
{:
    
    RESULT=v;
:}
    |   PARENTESISA expression:e PARENTESISC
{:
    Nodo node=new Nodo("factor",parser.token);
    parser.token++;
    
    node.addHijo((Nodo)e);
   
    RESULT=node;
:}
    |   NOT:n factor:f
{:
    Nodo node=new Nodo(" factor",parser.token);
    parser.token++;

    Nodo not=new Nodo("Not",parser.token);
    parser.token++;
    not.addHijo(n.toString(),parser.token);

    if(f!=null){
        node.addHijitos(((Nodo)f).getHijos());
    }

    RESULT=node;
:}
;

signo ::= OPEA_SUM:op
{:
    Nodo node= new Nodo("Signo",parser.token);
    parser.token++;

    Nodo opea_sum=new Nodo("Operacion Suma/Resta",parser.token);
    parser.token++;
    opea_sum.addHijo(op.toString(),parser.token);
    parser.token++;

    node.addHijo(opea_sum);

    RESULT=node;
:};

list_expression::= expression:e
{:
    Nodo node=new Nodo("Lista de Expresiones",parser.token);
    parser.token++;
    node.addHijo((Nodo)e);

    RESULT=e;
:} | list_expression:list COMMA expression:e
{:
    Nodo node=new Nodo("Lista de Expresiones",parser.token);
    parser.token++;

    if(list!=null){
        node.addHijitos(((Nodo)list).getHijos());
    }
    Nodo coma=new Nodo(",",parser.token);
    parser.token++;
    node.addHijo(coma);

    node.addHijo((Nodo)e);
    
    RESULT=node;
:};