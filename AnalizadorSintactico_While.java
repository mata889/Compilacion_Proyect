
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 12 20:52:24 CST 2020
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 12 20:52:24 CST 2020
  */
public class AnalizadorSintactico_While extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico_While() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_While(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_While(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\007\000\002\012" +
    "\006\000\002\015\006\000\002\024\013\000\002\023\016" +
    "\000\002\021\010\000\002\021\003\000\002\021\003\000" +
    "\002\021\005\000\002\011\003\000\002\011\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\013\003\000\002\013\003\000\002\022\005" +
    "\000\002\022\005\000\002\014\015\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\003\003\000\002" +
    "\003\003\000\002\016\010\000\002\017\007\000\002\020" +
    "\010\000\002\020\006\000\002\004\003\000\002\004\005" +
    "\000\002\025\003\000\002\025\004\000\002\025\005\000" +
    "\002\026\003\000\002\026\005\000\002\030\003\000\002" +
    "\030\006\000\002\030\003\000\002\030\005\000\002\030" +
    "\004\000\002\031\003\000\002\031\003\000\002\031\004" +
    "\000\002\027\003\000\002\032\003\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\010\000\004\046\005\001\002\000\004\002\012\001" +
    "\002\000\004\047\006\001\002\000\004\017\007\001\002" +
    "\000\002\001\002\000\004\020\011\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\010\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico_While$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico_While$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico_While$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s){ 

       System.out.println("Sintaxis correcta");
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 

        System.out.println("Sintaxis correcta"); 
    } 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico_While$actions {
  private final AnalizadorSintactico_While parser;

  /** Constructor */
  CUP$AnalizadorSintactico_While$actions(AnalizadorSintactico_While parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_While$do_action(
    int                        CUP$AnalizadorSintactico_While$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_While$parser,
    java.util.Stack            CUP$AnalizadorSintactico_While$stack,
    int                        CUP$AnalizadorSintactico_While$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico_While$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico_While$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_expression ::= list_expression COMMA expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("list_expression",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // list_expression ::= expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("list_expression",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // signo ::= OPEA_SUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("signo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor_for ::= signo NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("factor_for",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor_for ::= NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("factor_for",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor_for ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("factor_for",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= NOT factor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= PARENTESISA expression PARENTESISC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= ID PARENTESISA list_expression PARENTESISC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // termino ::= termino OPEA_MULT factor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression_simple ::= expression_simple OPEA_SUM termino 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("expression_simple",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression_simple ::= signo termino 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("expression_simple",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression_simple ::= termino 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("expression_simple",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression_simple OPER expression_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression_simple 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // eif ::= ELSE ABRIRC proposition CERRARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("eif",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // eif ::= EIF expression ABRIRC proposition CERRARC eif 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("eif",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ifNEmparejado ::= IF expression ABRIRC proposition CERRARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("ifNEmparejado",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ifEmparejado ::= IF expression ABRIRC proposition CERRARC eif 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("ifEmparejado",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ifState ::= ifNEmparejado 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("ifState",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ifState ::= ifEmparejado 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("ifState",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valores ::= letter 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valores ::= num 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valores ::= bool 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("valores",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declara_array ::= VAR ID ASSIGNMENT NEW ARRAY PARENTESISA ID PARENTESISC BRACKETA type BRACKETC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("declara_array",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asigna ::= ASSIGNMENT NADA PUNTOC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("asigna",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asigna ::= ASSIGNMENT valores PUNTOC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("asigna",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declara_puntoc ::= asigna 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("declara_puntoc",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declara_puntoc ::= PUNTOC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("declara_puntoc",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= WORD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= LETTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= NUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_id ::= list_id COMMA ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("list_id",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_id ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("list_id",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proposition ::= ID ASSIGNMENT expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // proposition ::= ifState 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proposition ::= CicloFor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proposition ::= WLE expression FLECHA ABRIRC proposition CERRARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("proposition",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CicloFor ::= FOR PARENTESISA ID IN PUNTO PUNTO ID PARENTESISC FLECHA ABRIRC proposition CERRARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("CicloFor",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-11)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funciones ::= FUNC type ID PARENTESISA parametro PARENTESISC BRACKETA body BRACKETC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("funciones",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declara_simple ::= VAR type ID declara_puntoc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("declara_simple",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declara ::= VAR type list_id PUNTOC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("declara",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= START FLECHA BRACKETA body BRACKETC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_While$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico_While$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.elementAt(CUP$AnalizadorSintactico_While$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_While$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico_While$parser.done_parsing();
          return CUP$AnalizadorSintactico_While$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

